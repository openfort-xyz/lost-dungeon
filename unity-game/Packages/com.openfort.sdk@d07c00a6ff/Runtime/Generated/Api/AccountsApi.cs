/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel request to transfer ownership of an account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to cancel a pending transfer of ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        TransactionIntentResponse CancelTransferOwnership(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest);

        /// <summary>
        /// Cancel request to transfer ownership of an account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to cancel a pending transfer of ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        ApiResponse<TransactionIntentResponse> CancelTransferOwnershipWithHttpInfo(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest);
        /// <summary>
        /// Complete a recovery process of a recoverable account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        TransactionIntentResponse CompleteRecovery(string id, CompleteRecoveryRequest completeRecoveryRequest);

        /// <summary>
        /// Complete a recovery process of a recoverable account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        ApiResponse<TransactionIntentResponse> CompleteRecoveryWithHttpInfo(string id, CompleteRecoveryRequest completeRecoveryRequest);
        /// <summary>
        /// Create an account object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <returns>AccountResponse</returns>
        AccountResponse CreateAccount(CreateAccountRequest createAccountRequest);

        /// <summary>
        /// Create an account object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <returns>ApiResponse of AccountResponse</returns>
        ApiResponse<AccountResponse> CreateAccountWithHttpInfo(CreateAccountRequest createAccountRequest);
        /// <summary>
        /// Deploy an account.
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to deploy an account that was counterfactually generated.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <returns>AccountResponse</returns>
        AccountResponse DeployAccount(string id, DeployRequest deployRequest);

        /// <summary>
        /// Deploy an account.
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to deploy an account that was counterfactually generated.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <returns>ApiResponse of AccountResponse</returns>
        ApiResponse<AccountResponse> DeployAccountWithHttpInfo(string id, DeployRequest deployRequest);
        /// <summary>
        /// Get existing account.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>AccountResponse</returns>
        AccountResponse GetAccount(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>));

        /// <summary>
        /// Get existing account.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        ApiResponse<AccountResponse> GetAccountWithHttpInfo(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>));
        /// <summary>
        /// List accounts of a player.
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <returns>AccountListResponse</returns>
        AccountListResponse GetAccounts(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>));

        /// <summary>
        /// List accounts of a player.
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <returns>ApiResponse of AccountListResponse</returns>
        ApiResponse<AccountListResponse> GetAccountsWithHttpInfo(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>));
        /// <summary>
        /// Request transfer ownership of account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        TransactionIntentResponse RequestTransferOwnership(string id, TransferOwnershipRequest transferOwnershipRequest);

        /// <summary>
        /// Request transfer ownership of account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        ApiResponse<TransactionIntentResponse> RequestTransferOwnershipWithHttpInfo(string id, TransferOwnershipRequest transferOwnershipRequest);
        /// <summary>
        /// Sign a given payload
        /// </summary>
        /// <remarks>
        /// Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <returns>SignPayloadResponse</returns>
        SignPayloadResponse SignPayload(string id, SignPayloadRequest signPayloadRequest);

        /// <summary>
        /// Sign a given payload
        /// </summary>
        /// <remarks>
        /// Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <returns>ApiResponse of SignPayloadResponse</returns>
        ApiResponse<SignPayloadResponse> SignPayloadWithHttpInfo(string id, SignPayloadRequest signPayloadRequest);
        /// <summary>
        /// Start a recovery process of a recoverable account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        TransactionIntentResponse StartRecovery(string id, StartRecoveryRequest startRecoveryRequest);

        /// <summary>
        /// Start a recovery process of a recoverable account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        ApiResponse<TransactionIntentResponse> StartRecoveryWithHttpInfo(string id, StartRecoveryRequest startRecoveryRequest);
        /// <summary>
        /// Sync account state with the blockchain
        /// </summary>
        /// <remarks>
        /// This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>AccountResponse</returns>
        AccountResponse SyncAccount(string id);

        /// <summary>
        /// Sync account state with the blockchain
        /// </summary>
        /// <remarks>
        /// This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        ApiResponse<AccountResponse> SyncAccountWithHttpInfo(string id);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel request to transfer ownership of an account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to cancel a pending transfer of ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        System.Threading.Tasks.Task<TransactionIntentResponse> CancelTransferOwnershipAsync(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel request to transfer ownership of an account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to cancel a pending transfer of ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionIntentResponse>> CancelTransferOwnershipWithHttpInfoAsync(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Complete a recovery process of a recoverable account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        System.Threading.Tasks.Task<TransactionIntentResponse> CompleteRecoveryAsync(string id, CompleteRecoveryRequest completeRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Complete a recovery process of a recoverable account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionIntentResponse>> CompleteRecoveryWithHttpInfoAsync(string id, CompleteRecoveryRequest completeRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an account object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(CreateAccountRequest createAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an account object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponse>> CreateAccountWithHttpInfoAsync(CreateAccountRequest createAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deploy an account.
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to deploy an account that was counterfactually generated.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        System.Threading.Tasks.Task<AccountResponse> DeployAccountAsync(string id, DeployRequest deployRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deploy an account.
        /// </summary>
        /// <remarks>
        /// This endpoint can be used to deploy an account that was counterfactually generated.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponse>> DeployAccountWithHttpInfoAsync(string id, DeployRequest deployRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get existing account.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        System.Threading.Tasks.Task<AccountResponse> GetAccountAsync(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get existing account.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponse>> GetAccountWithHttpInfoAsync(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List accounts of a player.
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountListResponse</returns>
        System.Threading.Tasks.Task<AccountListResponse> GetAccountsAsync(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List accounts of a player.
        /// </summary>
        /// <remarks>
        /// Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountListResponse>> GetAccountsWithHttpInfoAsync(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Request transfer ownership of account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        System.Threading.Tasks.Task<TransactionIntentResponse> RequestTransferOwnershipAsync(string id, TransferOwnershipRequest transferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Request transfer ownership of account.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionIntentResponse>> RequestTransferOwnershipWithHttpInfoAsync(string id, TransferOwnershipRequest transferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sign a given payload
        /// </summary>
        /// <remarks>
        /// Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignPayloadResponse</returns>
        System.Threading.Tasks.Task<SignPayloadResponse> SignPayloadAsync(string id, SignPayloadRequest signPayloadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sign a given payload
        /// </summary>
        /// <remarks>
        /// Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignPayloadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignPayloadResponse>> SignPayloadWithHttpInfoAsync(string id, SignPayloadRequest signPayloadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Start a recovery process of a recoverable account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        System.Threading.Tasks.Task<TransactionIntentResponse> StartRecoveryAsync(string id, StartRecoveryRequest startRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start a recovery process of a recoverable account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionIntentResponse>> StartRecoveryWithHttpInfoAsync(string id, StartRecoveryRequest startRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sync account state with the blockchain
        /// </summary>
        /// <remarks>
        /// This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        System.Threading.Tasks.Task<AccountResponse> SyncAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sync account state with the blockchain
        /// </summary>
        /// <remarks>
        /// This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponse>> SyncAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IAccountsApiSync, IAccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IDisposable, IAccountsApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AccountsApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AccountsApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AccountsApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel request to transfer ownership of an account. This endpoint allows you to cancel a pending transfer of ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        public TransactionIntentResponse CancelTransferOwnership(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest)
        {
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = CancelTransferOwnershipWithHttpInfo(id, cancelTransferOwnershipRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel request to transfer ownership of an account. This endpoint allows you to cancel a pending transfer of ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        public Openfort.Client.ApiResponse<TransactionIntentResponse> CancelTransferOwnershipWithHttpInfo(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->CancelTransferOwnership");

            // verify the required parameter 'cancelTransferOwnershipRequest' is set
            if (cancelTransferOwnershipRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'cancelTransferOwnershipRequest' when calling AccountsApi->CancelTransferOwnership");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cancelTransferOwnershipRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionIntentResponse>("/v1/accounts/{id}/cancel_transfer_ownership", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelTransferOwnership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel request to transfer ownership of an account. This endpoint allows you to cancel a pending transfer of ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        public async System.Threading.Tasks.Task<TransactionIntentResponse> CancelTransferOwnershipAsync(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CancelTransferOwnershipWithHttpInfoAsync(id, cancelTransferOwnershipRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel request to transfer ownership of an account. This endpoint allows you to cancel a pending transfer of ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancelTransferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<TransactionIntentResponse>> CancelTransferOwnershipWithHttpInfoAsync(string id, CancelTransferOwnershipRequest cancelTransferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->CancelTransferOwnership");

            // verify the required parameter 'cancelTransferOwnershipRequest' is set
            if (cancelTransferOwnershipRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'cancelTransferOwnershipRequest' when calling AccountsApi->CancelTransferOwnership");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = cancelTransferOwnershipRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionIntentResponse>("/v1/accounts/{id}/cancel_transfer_ownership", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelTransferOwnership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        public TransactionIntentResponse CompleteRecovery(string id, CompleteRecoveryRequest completeRecoveryRequest)
        {
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = CompleteRecoveryWithHttpInfo(id, completeRecoveryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        public Openfort.Client.ApiResponse<TransactionIntentResponse> CompleteRecoveryWithHttpInfo(string id, CompleteRecoveryRequest completeRecoveryRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->CompleteRecovery");

            // verify the required parameter 'completeRecoveryRequest' is set
            if (completeRecoveryRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'completeRecoveryRequest' when calling AccountsApi->CompleteRecovery");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeRecoveryRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionIntentResponse>("/v1/accounts/{id}/complete_recovery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteRecovery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Complete a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        public async System.Threading.Tasks.Task<TransactionIntentResponse> CompleteRecoveryAsync(string id, CompleteRecoveryRequest completeRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CompleteRecoveryWithHttpInfoAsync(id, completeRecoveryRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Complete a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="completeRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<TransactionIntentResponse>> CompleteRecoveryWithHttpInfoAsync(string id, CompleteRecoveryRequest completeRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->CompleteRecovery");

            // verify the required parameter 'completeRecoveryRequest' is set
            if (completeRecoveryRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'completeRecoveryRequest' when calling AccountsApi->CompleteRecovery");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = completeRecoveryRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionIntentResponse>("/v1/accounts/{id}/complete_recovery", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CompleteRecovery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an account object. This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <returns>AccountResponse</returns>
        public AccountResponse CreateAccount(CreateAccountRequest createAccountRequest)
        {
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = CreateAccountWithHttpInfo(createAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account object. This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <returns>ApiResponse of AccountResponse</returns>
        public Openfort.Client.ApiResponse<AccountResponse> CreateAccountWithHttpInfo(CreateAccountRequest createAccountRequest)
        {
            // verify the required parameter 'createAccountRequest' is set
            if (createAccountRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createAccountRequest' when calling AccountsApi->CreateAccount");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAccountRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountResponse>("/v1/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an account object. This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        public async System.Threading.Tasks.Task<AccountResponse> CreateAccountAsync(CreateAccountRequest createAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateAccountWithHttpInfoAsync(createAccountRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an account object. This endpoint allows you to add a new account to your Openfort player. Only one account can be active per chain per player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAccountRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountResponse>> CreateAccountWithHttpInfoAsync(CreateAccountRequest createAccountRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createAccountRequest' is set
            if (createAccountRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createAccountRequest' when calling AccountsApi->CreateAccount");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createAccountRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountResponse>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deploy an account. This endpoint can be used to deploy an account that was counterfactually generated.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <returns>AccountResponse</returns>
        public AccountResponse DeployAccount(string id, DeployRequest deployRequest)
        {
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = DeployAccountWithHttpInfo(id, deployRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy an account. This endpoint can be used to deploy an account that was counterfactually generated.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <returns>ApiResponse of AccountResponse</returns>
        public Openfort.Client.ApiResponse<AccountResponse> DeployAccountWithHttpInfo(string id, DeployRequest deployRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->DeployAccount");

            // verify the required parameter 'deployRequest' is set
            if (deployRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'deployRequest' when calling AccountsApi->DeployAccount");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deployRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountResponse>("/v1/accounts/{id}/deploy", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeployAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deploy an account. This endpoint can be used to deploy an account that was counterfactually generated.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        public async System.Threading.Tasks.Task<AccountResponse> DeployAccountAsync(string id, DeployRequest deployRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DeployAccountWithHttpInfoAsync(id, deployRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deploy an account. This endpoint can be used to deploy an account that was counterfactually generated.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="deployRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountResponse>> DeployAccountWithHttpInfoAsync(string id, DeployRequest deployRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->DeployAccount");

            // verify the required parameter 'deployRequest' is set
            if (deployRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'deployRequest' when calling AccountsApi->DeployAccount");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = deployRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountResponse>("/v1/accounts/{id}/deploy", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeployAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get existing account. Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>AccountResponse</returns>
        public AccountResponse GetAccount(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>))
        {
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = GetAccountWithHttpInfo(id, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get existing account. Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        public Openfort.Client.ApiResponse<AccountResponse> GetAccountWithHttpInfo(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->GetAccount");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountResponse>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get existing account. Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        public async System.Threading.Tasks.Task<AccountResponse> GetAccountAsync(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountWithHttpInfoAsync(id, expand, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get existing account. Retrieves the details of an existing account. Supply the unique account ID from either a account creation request or the account list, and Openfort will return the corresponding account information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="expand"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountResponse>> GetAccountWithHttpInfoAsync(string id, List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->GetAccount");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountResponse>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List accounts of a player. Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <returns>AccountListResponse</returns>
        public AccountListResponse GetAccounts(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>))
        {
            Openfort.Client.ApiResponse<AccountListResponse> localVarResponse = GetAccountsWithHttpInfo(player, limit, skip, order, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List accounts of a player. Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <returns>ApiResponse of AccountListResponse</returns>
        public Openfort.Client.ApiResponse<AccountListResponse> GetAccountsWithHttpInfo(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling AccountsApi->GetAccounts");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountListResponse>("/v1/accounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List accounts of a player. Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountListResponse</returns>
        public async System.Threading.Tasks.Task<AccountListResponse> GetAccountsAsync(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountsWithHttpInfoAsync(player, limit, skip, order, expand, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List accounts of a player. Returns a list of accounts for the given player. The accounts are returned sorted by creation date, with the most recently created accounts appearing first. By default, a maximum of ten accounts are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player">Specifies the unique player ID (starts with pla_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountListResponse>> GetAccountsWithHttpInfoAsync(string player, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<AccountResponseExpandable> expand = default(List<AccountResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'player' is set
            if (player == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'player' when calling AccountsApi->GetAccounts");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<AccountListResponse>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request transfer ownership of account. This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        public TransactionIntentResponse RequestTransferOwnership(string id, TransferOwnershipRequest transferOwnershipRequest)
        {
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = RequestTransferOwnershipWithHttpInfo(id, transferOwnershipRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request transfer ownership of account. This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        public Openfort.Client.ApiResponse<TransactionIntentResponse> RequestTransferOwnershipWithHttpInfo(string id, TransferOwnershipRequest transferOwnershipRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->RequestTransferOwnership");

            // verify the required parameter 'transferOwnershipRequest' is set
            if (transferOwnershipRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'transferOwnershipRequest' when calling AccountsApi->RequestTransferOwnership");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = transferOwnershipRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionIntentResponse>("/v1/accounts/{id}/request_transfer_ownership", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTransferOwnership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Request transfer ownership of account. This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        public async System.Threading.Tasks.Task<TransactionIntentResponse> RequestTransferOwnershipAsync(string id, TransferOwnershipRequest transferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RequestTransferOwnershipWithHttpInfoAsync(id, transferOwnershipRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Request transfer ownership of account. This endpoint allows you to perform a request to change the owner of an account. To perform an update on the owner of an account, first you must provide a new owner address. Once requested, the owner must accept to take ownership by calling &#x60;acceptOwnership()&#x60; in the smart contract account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="transferOwnershipRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<TransactionIntentResponse>> RequestTransferOwnershipWithHttpInfoAsync(string id, TransferOwnershipRequest transferOwnershipRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->RequestTransferOwnership");

            // verify the required parameter 'transferOwnershipRequest' is set
            if (transferOwnershipRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'transferOwnershipRequest' when calling AccountsApi->RequestTransferOwnership");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = transferOwnershipRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionIntentResponse>("/v1/accounts/{id}/request_transfer_ownership", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestTransferOwnership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign a given payload Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <returns>SignPayloadResponse</returns>
        public SignPayloadResponse SignPayload(string id, SignPayloadRequest signPayloadRequest)
        {
            Openfort.Client.ApiResponse<SignPayloadResponse> localVarResponse = SignPayloadWithHttpInfo(id, signPayloadRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign a given payload Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <returns>ApiResponse of SignPayloadResponse</returns>
        public Openfort.Client.ApiResponse<SignPayloadResponse> SignPayloadWithHttpInfo(string id, SignPayloadRequest signPayloadRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->SignPayload");

            // verify the required parameter 'signPayloadRequest' is set
            if (signPayloadRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'signPayloadRequest' when calling AccountsApi->SignPayload");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = signPayloadRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SignPayloadResponse>("/v1/accounts/{id}/sign_payload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPayload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sign a given payload Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SignPayloadResponse</returns>
        public async System.Threading.Tasks.Task<SignPayloadResponse> SignPayloadAsync(string id, SignPayloadRequest signPayloadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SignPayloadWithHttpInfoAsync(id, signPayloadRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<SignPayloadResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<SignPayloadResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sign a given payload Signs the typed data value with types data structure for domain using the EIP-712 (https://eips.ethereum.org/EIPS/eip-712) specification.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="signPayloadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SignPayloadResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<SignPayloadResponse>> SignPayloadWithHttpInfoAsync(string id, SignPayloadRequest signPayloadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->SignPayload");

            // verify the required parameter 'signPayloadRequest' is set
            if (signPayloadRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'signPayloadRequest' when calling AccountsApi->SignPayload");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = signPayloadRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<SignPayloadResponse>("/v1/accounts/{id}/sign_payload", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignPayload", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        public TransactionIntentResponse StartRecovery(string id, StartRecoveryRequest startRecoveryRequest)
        {
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = StartRecoveryWithHttpInfo(id, startRecoveryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        public Openfort.Client.ApiResponse<TransactionIntentResponse> StartRecoveryWithHttpInfo(string id, StartRecoveryRequest startRecoveryRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->StartRecovery");

            // verify the required parameter 'startRecoveryRequest' is set
            if (startRecoveryRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'startRecoveryRequest' when calling AccountsApi->StartRecovery");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startRecoveryRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionIntentResponse>("/v1/accounts/{id}/start_recovery", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartRecovery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        public async System.Threading.Tasks.Task<TransactionIntentResponse> StartRecoveryAsync(string id, StartRecoveryRequest startRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StartRecoveryWithHttpInfoAsync(id, startRecoveryRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Start a recovery process of a recoverable account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="startRecoveryRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<TransactionIntentResponse>> StartRecoveryWithHttpInfoAsync(string id, StartRecoveryRequest startRecoveryRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->StartRecovery");

            // verify the required parameter 'startRecoveryRequest' is set
            if (startRecoveryRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'startRecoveryRequest' when calling AccountsApi->StartRecovery");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = startRecoveryRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionIntentResponse>("/v1/accounts/{id}/start_recovery", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StartRecovery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync account state with the blockchain This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>AccountResponse</returns>
        public AccountResponse SyncAccount(string id)
        {
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = SyncAccountWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync account state with the blockchain This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ApiResponse of AccountResponse</returns>
        public Openfort.Client.ApiResponse<AccountResponse> SyncAccountWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->SyncAccount");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountResponse>("/v1/accounts/{id}/sync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sync account state with the blockchain This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponse</returns>
        public async System.Threading.Tasks.Task<AccountResponse> SyncAccountAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SyncAccountWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<AccountResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sync account state with the blockchain This endpoint updates the account state with the blockchain. Specifically, it updates the account owner and whether its deployed or not.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<AccountResponse>> SyncAccountWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling AccountsApi->SyncAccount");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<AccountResponse>("/v1/accounts/{id}/sync", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SyncAccount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
