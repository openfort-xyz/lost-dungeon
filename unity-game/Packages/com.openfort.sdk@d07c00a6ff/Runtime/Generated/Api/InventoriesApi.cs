/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>InventoryListResponse</returns>
        InventoryListResponse GetAccountCryptoCurrencyInventory(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));

        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        ApiResponse<InventoryListResponse> GetAccountCryptoCurrencyInventoryWithHttpInfo(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));
        /// <summary>
        /// Get inventory of account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ObsoleteInventoryResponse</returns>
        [Obsolete]
        ObsoleteInventoryResponse GetAccountInventory(string id);

        /// <summary>
        /// Get inventory of account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ApiResponse of ObsoleteInventoryResponse</returns>
        [Obsolete]
        ApiResponse<ObsoleteInventoryResponse> GetAccountInventoryWithHttpInfo(string id);
        /// <summary>
        /// Retrieves the native asset of an existing account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>InventoryResponse</returns>
        InventoryResponse GetAccountNativeInventory(string id);

        /// <summary>
        /// Retrieves the native asset of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        ApiResponse<InventoryResponse> GetAccountNativeInventoryWithHttpInfo(string id);
        /// <summary>
        /// Retrieves the NFT assets of an existing account.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>InventoryListResponse</returns>
        InventoryListResponse GetAccountNftInventory(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));

        /// <summary>
        /// Retrieves the NFT assets of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        ApiResponse<InventoryListResponse> GetAccountNftInventoryWithHttpInfo(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));
        /// <summary>
        /// Get cryptocurrency list of player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>InventoryListResponse</returns>
        InventoryListResponse GetPlayerCryptoCurrencyInventory(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));

        /// <summary>
        /// Get cryptocurrency list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        ApiResponse<InventoryListResponse> GetPlayerCryptoCurrencyInventoryWithHttpInfo(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));
        /// <summary>
        /// Get inventory of player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>ObsoleteInventoryResponse</returns>
        [Obsolete]
        ObsoleteInventoryResponse GetPlayerInventory(string id, int chainId);

        /// <summary>
        /// Get inventory of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>ApiResponse of ObsoleteInventoryResponse</returns>
        [Obsolete]
        ApiResponse<ObsoleteInventoryResponse> GetPlayerInventoryWithHttpInfo(string id, int chainId);
        /// <summary>
        /// Get native token list of player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>InventoryResponse</returns>
        InventoryResponse GetPlayerNativeInventory(string id, int chainId);

        /// <summary>
        /// Get native token list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        ApiResponse<InventoryResponse> GetPlayerNativeInventoryWithHttpInfo(string id, int chainId);
        /// <summary>
        /// Get NFTs list of player.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>InventoryListResponse</returns>
        InventoryListResponse GetPlayerNftInventory(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));

        /// <summary>
        /// Get NFTs list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        ApiResponse<InventoryListResponse> GetPlayerNftInventoryWithHttpInfo(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        System.Threading.Tasks.Task<InventoryListResponse> GetAccountCryptoCurrencyInventoryAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryListResponse>> GetAccountCryptoCurrencyInventoryWithHttpInfoAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get inventory of account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObsoleteInventoryResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ObsoleteInventoryResponse> GetAccountInventoryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get inventory of account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObsoleteInventoryResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ObsoleteInventoryResponse>> GetAccountInventoryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the native asset of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        System.Threading.Tasks.Task<InventoryResponse> GetAccountNativeInventoryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the native asset of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryResponse>> GetAccountNativeInventoryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the NFT assets of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        System.Threading.Tasks.Task<InventoryListResponse> GetAccountNftInventoryAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the NFT assets of an existing account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryListResponse>> GetAccountNftInventoryWithHttpInfoAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get cryptocurrency list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        System.Threading.Tasks.Task<InventoryListResponse> GetPlayerCryptoCurrencyInventoryAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get cryptocurrency list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryListResponse>> GetPlayerCryptoCurrencyInventoryWithHttpInfoAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get inventory of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObsoleteInventoryResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ObsoleteInventoryResponse> GetPlayerInventoryAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get inventory of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObsoleteInventoryResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ObsoleteInventoryResponse>> GetPlayerInventoryWithHttpInfoAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get native token list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        System.Threading.Tasks.Task<InventoryResponse> GetPlayerNativeInventoryAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get native token list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryResponse>> GetPlayerNativeInventoryWithHttpInfoAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get NFTs list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        System.Threading.Tasks.Task<InventoryListResponse> GetPlayerNftInventoryAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get NFTs list of player.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InventoryListResponse>> GetPlayerNftInventoryWithHttpInfoAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInventoriesApi : IInventoriesApiSync, IInventoriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InventoriesApi : IDisposable, IInventoriesApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoriesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public InventoriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoriesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public InventoriesApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoriesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public InventoriesApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InventoriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public InventoriesApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>InventoryListResponse</returns>
        public InventoryListResponse GetAccountCryptoCurrencyInventory(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = GetAccountCryptoCurrencyInventoryWithHttpInfo(id, limit, skip, order, contractId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        public Openfort.Client.ApiResponse<InventoryListResponse> GetAccountCryptoCurrencyInventoryWithHttpInfo(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountCryptoCurrencyInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryListResponse>("/v1/accounts/{id}/inventory/cryptocurrency", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountCryptoCurrencyInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        public async System.Threading.Tasks.Task<InventoryListResponse> GetAccountCryptoCurrencyInventoryAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountCryptoCurrencyInventoryWithHttpInfoAsync(id, limit, skip, order, contractId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the cryptocurrency assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<InventoryListResponse>> GetAccountCryptoCurrencyInventoryWithHttpInfoAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountCryptoCurrencyInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<InventoryListResponse>("/v1/accounts/{id}/inventory/cryptocurrency", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountCryptoCurrencyInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inventory of account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ObsoleteInventoryResponse</returns>
        [Obsolete]
        public ObsoleteInventoryResponse GetAccountInventory(string id)
        {
            Openfort.Client.ApiResponse<ObsoleteInventoryResponse> localVarResponse = GetAccountInventoryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get inventory of account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ApiResponse of ObsoleteInventoryResponse</returns>
        [Obsolete]
        public Openfort.Client.ApiResponse<ObsoleteInventoryResponse> GetAccountInventoryWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ObsoleteInventoryResponse>("/v1/accounts/{id}/inventory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inventory of account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObsoleteInventoryResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ObsoleteInventoryResponse> GetAccountInventoryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountInventoryWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<ObsoleteInventoryResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<ObsoleteInventoryResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get inventory of account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObsoleteInventoryResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<ObsoleteInventoryResponse>> GetAccountInventoryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ObsoleteInventoryResponse>("/v1/accounts/{id}/inventory", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the native asset of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>InventoryResponse</returns>
        public InventoryResponse GetAccountNativeInventory(string id)
        {
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = GetAccountNativeInventoryWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the native asset of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        public Openfort.Client.ApiResponse<InventoryResponse> GetAccountNativeInventoryWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountNativeInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryResponse>("/v1/accounts/{id}/inventory/native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountNativeInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the native asset of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        public async System.Threading.Tasks.Task<InventoryResponse> GetAccountNativeInventoryAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountNativeInventoryWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the native asset of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<InventoryResponse>> GetAccountNativeInventoryWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountNativeInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<InventoryResponse>("/v1/accounts/{id}/inventory/native", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountNativeInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the NFT assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>InventoryListResponse</returns>
        public InventoryListResponse GetAccountNftInventory(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = GetAccountNftInventoryWithHttpInfo(id, limit, skip, order, contractId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the NFT assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        public Openfort.Client.ApiResponse<InventoryListResponse> GetAccountNftInventoryWithHttpInfo(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountNftInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryListResponse>("/v1/accounts/{id}/inventory/nft", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountNftInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the NFT assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        public async System.Threading.Tasks.Task<InventoryListResponse> GetAccountNftInventoryAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAccountNftInventoryWithHttpInfoAsync(id, limit, skip, order, contractId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the NFT assets of an existing account. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique account ID.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<InventoryListResponse>> GetAccountNftInventoryWithHttpInfoAsync(string id, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetAccountNftInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<InventoryListResponse>("/v1/accounts/{id}/inventory/nft", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountNftInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get cryptocurrency list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>InventoryListResponse</returns>
        public InventoryListResponse GetPlayerCryptoCurrencyInventory(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = GetPlayerCryptoCurrencyInventoryWithHttpInfo(id, chainId, limit, skip, order, contractId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get cryptocurrency list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        public Openfort.Client.ApiResponse<InventoryListResponse> GetPlayerCryptoCurrencyInventoryWithHttpInfo(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerCryptoCurrencyInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryListResponse>("/v1/players/{id}/inventory/cryptocurrency", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerCryptoCurrencyInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get cryptocurrency list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        public async System.Threading.Tasks.Task<InventoryListResponse> GetPlayerCryptoCurrencyInventoryAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayerCryptoCurrencyInventoryWithHttpInfoAsync(id, chainId, limit, skip, order, contractId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get cryptocurrency list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<InventoryListResponse>> GetPlayerCryptoCurrencyInventoryWithHttpInfoAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerCryptoCurrencyInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<InventoryListResponse>("/v1/players/{id}/inventory/cryptocurrency", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerCryptoCurrencyInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inventory of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>ObsoleteInventoryResponse</returns>
        [Obsolete]
        public ObsoleteInventoryResponse GetPlayerInventory(string id, int chainId)
        {
            Openfort.Client.ApiResponse<ObsoleteInventoryResponse> localVarResponse = GetPlayerInventoryWithHttpInfo(id, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get inventory of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>ApiResponse of ObsoleteInventoryResponse</returns>
        [Obsolete]
        public Openfort.Client.ApiResponse<ObsoleteInventoryResponse> GetPlayerInventoryWithHttpInfo(string id, int chainId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ObsoleteInventoryResponse>("/v1/players/{id}/inventory", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get inventory of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObsoleteInventoryResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ObsoleteInventoryResponse> GetPlayerInventoryAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayerInventoryWithHttpInfoAsync(id, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<ObsoleteInventoryResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<ObsoleteInventoryResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get inventory of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObsoleteInventoryResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<ObsoleteInventoryResponse>> GetPlayerInventoryWithHttpInfoAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ObsoleteInventoryResponse>("/v1/players/{id}/inventory", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get native token list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>InventoryResponse</returns>
        public InventoryResponse GetPlayerNativeInventory(string id, int chainId)
        {
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = GetPlayerNativeInventoryWithHttpInfo(id, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get native token list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <returns>ApiResponse of InventoryResponse</returns>
        public Openfort.Client.ApiResponse<InventoryResponse> GetPlayerNativeInventoryWithHttpInfo(string id, int chainId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerNativeInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryResponse>("/v1/players/{id}/inventory/native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerNativeInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get native token list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryResponse</returns>
        public async System.Threading.Tasks.Task<InventoryResponse> GetPlayerNativeInventoryAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayerNativeInventoryWithHttpInfoAsync(id, chainId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<InventoryResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get native token list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<InventoryResponse>> GetPlayerNativeInventoryWithHttpInfoAsync(string id, int chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerNativeInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<InventoryResponse>("/v1/players/{id}/inventory/native", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerNativeInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>InventoryListResponse</returns>
        public InventoryListResponse GetPlayerNftInventory(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = GetPlayerNftInventoryWithHttpInfo(id, chainId, limit, skip, order, contractId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <returns>ApiResponse of InventoryListResponse</returns>
        public Openfort.Client.ApiResponse<InventoryListResponse> GetPlayerNftInventoryWithHttpInfo(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerNftInventory");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InventoryListResponse>("/v1/players/{id}/inventory/nft", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerNftInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get NFTs list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InventoryListResponse</returns>
        public async System.Threading.Tasks.Task<InventoryListResponse> GetPlayerNftInventoryAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPlayerNftInventoryWithHttpInfoAsync(id, chainId, limit, skip, order, contractId, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<InventoryListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get NFTs list of player. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="chainId">Filter by chain id.</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="contractId">Filter by contract ID (starts with con_). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InventoryListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<InventoryListResponse>> GetPlayerNftInventoryWithHttpInfoAsync(string id, int chainId, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<string> contractId = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling InventoriesApi->GetPlayerNftInventory");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (contractId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "contractId", contractId));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<InventoryListResponse>("/v1/players/{id}/inventory/nft", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerNftInventory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
