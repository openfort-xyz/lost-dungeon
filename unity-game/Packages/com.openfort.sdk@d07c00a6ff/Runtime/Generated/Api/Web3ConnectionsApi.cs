/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeb3ConnectionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Web3 Connection object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <returns>Web3ConnectionResponse</returns>
        Web3ConnectionResponse CreateWeb3Connection(CreateWeb3ConnectionRequest createWeb3ConnectionRequest);

        /// <summary>
        /// Create a Web3 Connection object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <returns>ApiResponse of Web3ConnectionResponse</returns>
        ApiResponse<Web3ConnectionResponse> CreateWeb3ConnectionWithHttpInfo(CreateWeb3ConnectionRequest createWeb3ConnectionRequest);
        /// <summary>
        /// List Web3 actions from a web3 connection.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <returns>Web3ActionListResponse</returns>
        Web3ActionListResponse GetWeb3Actions(string id);

        /// <summary>
        /// List Web3 actions from a web3 connection.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <returns>ApiResponse of Web3ActionListResponse</returns>
        ApiResponse<Web3ActionListResponse> GetWeb3ActionsWithHttpInfo(string id);
        /// <summary>
        /// Get a web3Connection object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>Web3ConnectionResponse</returns>
        Web3ConnectionResponse GetWeb3Connection(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>));

        /// <summary>
        /// Get a web3Connection object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>ApiResponse of Web3ConnectionResponse</returns>
        ApiResponse<Web3ConnectionResponse> GetWeb3ConnectionWithHttpInfo(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>));
        /// <summary>
        /// List Web3 connections.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <returns>Web3ConnectionListResponse</returns>
        Web3ConnectionListResponse GetWeb3Connections(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?));

        /// <summary>
        /// List Web3 connections.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <returns>ApiResponse of Web3ConnectionListResponse</returns>
        ApiResponse<Web3ConnectionListResponse> GetWeb3ConnectionsWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?));
        /// <summary>
        /// Approve or Reject a web3 action
        /// </summary>
        /// <remarks>
        /// Approve or Reject a web3 action for the given web3 connection.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <returns>Web3ActionResponse</returns>
        Web3ActionResponse SubmitWeb3Action(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest);

        /// <summary>
        /// Approve or Reject a web3 action
        /// </summary>
        /// <remarks>
        /// Approve or Reject a web3 action for the given web3 connection.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <returns>ApiResponse of Web3ActionResponse</returns>
        ApiResponse<Web3ActionResponse> SubmitWeb3ActionWithHttpInfo(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeb3ConnectionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a Web3 Connection object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ConnectionResponse</returns>
        System.Threading.Tasks.Task<Web3ConnectionResponse> CreateWeb3ConnectionAsync(CreateWeb3ConnectionRequest createWeb3ConnectionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Web3 Connection object.
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Web3ConnectionResponse>> CreateWeb3ConnectionWithHttpInfoAsync(CreateWeb3ConnectionRequest createWeb3ConnectionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Web3 actions from a web3 connection.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ActionListResponse</returns>
        System.Threading.Tasks.Task<Web3ActionListResponse> GetWeb3ActionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Web3 actions from a web3 connection.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ActionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Web3ActionListResponse>> GetWeb3ActionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a web3Connection object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ConnectionResponse</returns>
        System.Threading.Tasks.Task<Web3ConnectionResponse> GetWeb3ConnectionAsync(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a web3Connection object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ConnectionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Web3ConnectionResponse>> GetWeb3ConnectionWithHttpInfoAsync(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Web3 connections.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ConnectionListResponse</returns>
        System.Threading.Tasks.Task<Web3ConnectionListResponse> GetWeb3ConnectionsAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Web3 connections.
        /// </summary>
        /// <remarks>
        /// Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ConnectionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Web3ConnectionListResponse>> GetWeb3ConnectionsWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Approve or Reject a web3 action
        /// </summary>
        /// <remarks>
        /// Approve or Reject a web3 action for the given web3 connection.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ActionResponse</returns>
        System.Threading.Tasks.Task<Web3ActionResponse> SubmitWeb3ActionAsync(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve or Reject a web3 action
        /// </summary>
        /// <remarks>
        /// Approve or Reject a web3 action for the given web3 connection.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ActionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Web3ActionResponse>> SubmitWeb3ActionWithHttpInfoAsync(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWeb3ConnectionsApi : IWeb3ConnectionsApiSync, IWeb3ConnectionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Web3ConnectionsApi : IDisposable, IWeb3ConnectionsApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Web3ConnectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public Web3ConnectionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Web3ConnectionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public Web3ConnectionsApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Web3ConnectionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public Web3ConnectionsApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Web3ConnectionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public Web3ConnectionsApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Web3 Connection object. This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <returns>Web3ConnectionResponse</returns>
        public Web3ConnectionResponse CreateWeb3Connection(CreateWeb3ConnectionRequest createWeb3ConnectionRequest)
        {
            Openfort.Client.ApiResponse<Web3ConnectionResponse> localVarResponse = CreateWeb3ConnectionWithHttpInfo(createWeb3ConnectionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Web3 Connection object. This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <returns>ApiResponse of Web3ConnectionResponse</returns>
        public Openfort.Client.ApiResponse<Web3ConnectionResponse> CreateWeb3ConnectionWithHttpInfo(CreateWeb3ConnectionRequest createWeb3ConnectionRequest)
        {
            // verify the required parameter 'createWeb3ConnectionRequest' is set
            if (createWeb3ConnectionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createWeb3ConnectionRequest' when calling Web3ConnectionsApi->CreateWeb3Connection");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createWeb3ConnectionRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Web3ConnectionResponse>("/v1/web3_connections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWeb3Connection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Web3 Connection object. This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ConnectionResponse</returns>
        public async System.Threading.Tasks.Task<Web3ConnectionResponse> CreateWeb3ConnectionAsync(CreateWeb3ConnectionRequest createWeb3ConnectionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateWeb3ConnectionWithHttpInfoAsync(createWeb3ConnectionRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<Web3ConnectionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<Web3ConnectionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Web3 Connection object. This endpoint allows you to create a new web3 connection to your Openfort player. Together with the player ID (pla_), you need to provide a chain ID. The chain to use is required because Openfort needs to make sure the account is deployed, as counterfactual addresses cannot use web3 connections. The &#x60;uri&#x60; body parameter must contain a WalletConnect pairing URI (see: https://specs.walletconnect.com/2.0/specs/clients/core/pairing/pairing-uri)
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWeb3ConnectionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Web3ConnectionResponse>> CreateWeb3ConnectionWithHttpInfoAsync(CreateWeb3ConnectionRequest createWeb3ConnectionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createWeb3ConnectionRequest' is set
            if (createWeb3ConnectionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createWeb3ConnectionRequest' when calling Web3ConnectionsApi->CreateWeb3Connection");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createWeb3ConnectionRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Web3ConnectionResponse>("/v1/web3_connections", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWeb3Connection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Web3 actions from a web3 connection. Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <returns>Web3ActionListResponse</returns>
        public Web3ActionListResponse GetWeb3Actions(string id)
        {
            Openfort.Client.ApiResponse<Web3ActionListResponse> localVarResponse = GetWeb3ActionsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Web3 actions from a web3 connection. Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <returns>ApiResponse of Web3ActionListResponse</returns>
        public Openfort.Client.ApiResponse<Web3ActionListResponse> GetWeb3ActionsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling Web3ConnectionsApi->GetWeb3Actions");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Web3ActionListResponse>("/v1/web3_connections/{id}/actions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeb3Actions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Web3 actions from a web3 connection. Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ActionListResponse</returns>
        public async System.Threading.Tasks.Task<Web3ActionListResponse> GetWeb3ActionsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetWeb3ActionsWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<Web3ActionListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<Web3ActionListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Web3 actions from a web3 connection. Returns a list of web3 actions for the given web3 connection. The actions are returned sorted by creation date, with the most recently received action appearing first. By default, a maximum of ten actions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ActionListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Web3ActionListResponse>> GetWeb3ActionsWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling Web3ConnectionsApi->GetWeb3Actions");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Web3ActionListResponse>("/v1/web3_connections/{id}/actions", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeb3Actions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a web3Connection object. Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>Web3ConnectionResponse</returns>
        public Web3ConnectionResponse GetWeb3Connection(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>))
        {
            Openfort.Client.ApiResponse<Web3ConnectionResponse> localVarResponse = GetWeb3ConnectionWithHttpInfo(id, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a web3Connection object. Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>ApiResponse of Web3ConnectionResponse</returns>
        public Openfort.Client.ApiResponse<Web3ConnectionResponse> GetWeb3ConnectionWithHttpInfo(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling Web3ConnectionsApi->GetWeb3Connection");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Web3ConnectionResponse>("/v1/web3_connections/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeb3Connection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a web3Connection object. Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ConnectionResponse</returns>
        public async System.Threading.Tasks.Task<Web3ConnectionResponse> GetWeb3ConnectionAsync(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetWeb3ConnectionWithHttpInfoAsync(id, expand, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<Web3ConnectionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<Web3ConnectionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a web3Connection object. Retrieves the details of an existing web3 connection. Supply the unique web3 connection ID from either a web3 connection creation request or the web3 connection list. Openfort will return the corresponding web3 connection information.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique web3Connection ID (starts with web3_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ConnectionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Web3ConnectionResponse>> GetWeb3ConnectionWithHttpInfoAsync(string id, List<Web3ConnectionResponseExpandable> expand = default(List<Web3ConnectionResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling Web3ConnectionsApi->GetWeb3Connection");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Web3ConnectionResponse>("/v1/web3_connections/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeb3Connection", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Web3 connections. Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <returns>Web3ConnectionListResponse</returns>
        public Web3ConnectionListResponse GetWeb3Connections(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?))
        {
            Openfort.Client.ApiResponse<Web3ConnectionListResponse> localVarResponse = GetWeb3ConnectionsWithHttpInfo(limit, skip, order, player, disconnected);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Web3 connections. Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <returns>ApiResponse of Web3ConnectionListResponse</returns>
        public Openfort.Client.ApiResponse<Web3ConnectionListResponse> GetWeb3ConnectionsWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?))
        {
            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (player != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));
            }
            if (disconnected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "disconnected", disconnected));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Web3ConnectionListResponse>("/v1/web3_connections", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeb3Connections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Web3 connections. Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ConnectionListResponse</returns>
        public async System.Threading.Tasks.Task<Web3ConnectionListResponse> GetWeb3ConnectionsAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetWeb3ConnectionsWithHttpInfoAsync(limit, skip, order, player, disconnected, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<Web3ConnectionListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<Web3ConnectionListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Web3 connections. Returns a list of web3 connections for the given player. The connections are returned sorted by creation date, with the most recently created connections appearing first. By default, a maximum of ten connections are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="player">Specifies the unique player ID (starts with pla_) (optional)</param>
        /// <param name="disconnected">Specifies connection status (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ConnectionListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Web3ConnectionListResponse>> GetWeb3ConnectionsWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string player = default(string), bool? disconnected = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (player != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "player", player));
            }
            if (disconnected != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "disconnected", disconnected));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<Web3ConnectionListResponse>("/v1/web3_connections", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWeb3Connections", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve or Reject a web3 action Approve or Reject a web3 action for the given web3 connection.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <returns>Web3ActionResponse</returns>
        public Web3ActionResponse SubmitWeb3Action(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest)
        {
            Openfort.Client.ApiResponse<Web3ActionResponse> localVarResponse = SubmitWeb3ActionWithHttpInfo(id, web3Action, submitWeb3ActionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve or Reject a web3 action Approve or Reject a web3 action for the given web3 connection.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <returns>ApiResponse of Web3ActionResponse</returns>
        public Openfort.Client.ApiResponse<Web3ActionResponse> SubmitWeb3ActionWithHttpInfo(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling Web3ConnectionsApi->SubmitWeb3Action");

            // verify the required parameter 'web3Action' is set
            if (web3Action == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'web3Action' when calling Web3ConnectionsApi->SubmitWeb3Action");

            // verify the required parameter 'submitWeb3ActionRequest' is set
            if (submitWeb3ActionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'submitWeb3ActionRequest' when calling Web3ConnectionsApi->SubmitWeb3Action");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("web3_action", Openfort.Client.ClientUtils.ParameterToString(web3Action)); // path parameter
            localVarRequestOptions.Data = submitWeb3ActionRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Web3ActionResponse>("/v1/web3_connections/{id}/actions/{web3_action}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitWeb3Action", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve or Reject a web3 action Approve or Reject a web3 action for the given web3 connection.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Web3ActionResponse</returns>
        public async System.Threading.Tasks.Task<Web3ActionResponse> SubmitWeb3ActionAsync(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SubmitWeb3ActionWithHttpInfoAsync(id, web3Action, submitWeb3ActionRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<Web3ActionResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<Web3ActionResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve or Reject a web3 action Approve or Reject a web3 action for the given web3 connection.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the web3Connection ID (starts with web3_).</param>
        /// <param name="web3Action">Specifies web3_action (starts with act_).</param>
        /// <param name="submitWeb3ActionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Web3ActionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Web3ActionResponse>> SubmitWeb3ActionWithHttpInfoAsync(string id, string web3Action, SubmitWeb3ActionRequest submitWeb3ActionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling Web3ConnectionsApi->SubmitWeb3Action");

            // verify the required parameter 'web3Action' is set
            if (web3Action == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'web3Action' when calling Web3ConnectionsApi->SubmitWeb3Action");

            // verify the required parameter 'submitWeb3ActionRequest' is set
            if (submitWeb3ActionRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'submitWeb3ActionRequest' when calling Web3ConnectionsApi->SubmitWeb3Action");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("web3_action", Openfort.Client.ClientUtils.ParameterToString(web3Action)); // path parameter
            localVarRequestOptions.Data = submitWeb3ActionRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Web3ActionResponse>("/v1/web3_connections/{id}/actions/{web3_action}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SubmitWeb3Action", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
