/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add depositor address.
        /// </summary>
        /// <remarks>
        /// Verify signature and add a depositor address to the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <returns>PaymasterDepositorResponse</returns>
        PaymasterDepositorResponse AddDepositorAddress(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest);

        /// <summary>
        /// Add depositor address.
        /// </summary>
        /// <remarks>
        /// Verify signature and add a depositor address to the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <returns>ApiResponse of PaymasterDepositorResponse</returns>
        ApiResponse<PaymasterDepositorResponse> AddDepositorAddressWithHttpInfo(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest);
        /// <summary>
        /// List of depositor addresses.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the depositor addresses for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymasterDepositorListResponse</returns>
        PaymasterDepositorListResponse GetDepositorAddresses();

        /// <summary>
        /// List of depositor addresses.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the depositor addresses for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymasterDepositorListResponse</returns>
        ApiResponse<PaymasterDepositorListResponse> GetDepositorAddressesWithHttpInfo();
        /// <summary>
        /// Generate message to sign
        /// </summary>
        /// <remarks>
        /// Generate message, which should be signed for verification of the address ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <returns>PaymasterDepositorGetMessageResponse</returns>
        PaymasterDepositorGetMessageResponse GetMessageForSigningDepositorAddress(string address);

        /// <summary>
        /// Generate message to sign
        /// </summary>
        /// <remarks>
        /// Generate message, which should be signed for verification of the address ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <returns>ApiResponse of PaymasterDepositorGetMessageResponse</returns>
        ApiResponse<PaymasterDepositorGetMessageResponse> GetMessageForSigningDepositorAddressWithHttpInfo(string address);
        /// <summary>
        /// Removes depositor address.
        /// </summary>
        /// <remarks>
        /// Remove a depositor address from the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <returns>PaymasterDepositorDeleteResponse</returns>
        PaymasterDepositorDeleteResponse RemoveDepositorAddress(string id);

        /// <summary>
        /// Removes depositor address.
        /// </summary>
        /// <remarks>
        /// Remove a depositor address from the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <returns>ApiResponse of PaymasterDepositorDeleteResponse</returns>
        ApiResponse<PaymasterDepositorDeleteResponse> RemoveDepositorAddressWithHttpInfo(string id);
        /// <summary>
        /// Removes webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void RemoveWebhook();

        /// <summary>
        /// Removes webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWebhookWithHttpInfo();
        /// <summary>
        /// Update webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <returns></returns>
        void UpdateWebhook(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest);

        /// <summary>
        /// Update webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWebhookWithHttpInfo(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add depositor address.
        /// </summary>
        /// <remarks>
        /// Verify signature and add a depositor address to the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorResponse</returns>
        System.Threading.Tasks.Task<PaymasterDepositorResponse> AddDepositorAddressAsync(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add depositor address.
        /// </summary>
        /// <remarks>
        /// Verify signature and add a depositor address to the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymasterDepositorResponse>> AddDepositorAddressWithHttpInfoAsync(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of depositor addresses.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the depositor addresses for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorListResponse</returns>
        System.Threading.Tasks.Task<PaymasterDepositorListResponse> GetDepositorAddressesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of depositor addresses.
        /// </summary>
        /// <remarks>
        /// Retrieve the list of the depositor addresses for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymasterDepositorListResponse>> GetDepositorAddressesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate message to sign
        /// </summary>
        /// <remarks>
        /// Generate message, which should be signed for verification of the address ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorGetMessageResponse</returns>
        System.Threading.Tasks.Task<PaymasterDepositorGetMessageResponse> GetMessageForSigningDepositorAddressAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate message to sign
        /// </summary>
        /// <remarks>
        /// Generate message, which should be signed for verification of the address ownership.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorGetMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymasterDepositorGetMessageResponse>> GetMessageForSigningDepositorAddressWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes depositor address.
        /// </summary>
        /// <remarks>
        /// Remove a depositor address from the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorDeleteResponse</returns>
        System.Threading.Tasks.Task<PaymasterDepositorDeleteResponse> RemoveDepositorAddressAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes depositor address.
        /// </summary>
        /// <remarks>
        /// Remove a depositor address from the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymasterDepositorDeleteResponse>> RemoveDepositorAddressWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Removes webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveWebhookAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Removes webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveWebhookWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateWebhookAsync(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update webhook.
        /// </summary>
        /// <remarks>
        /// Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateWebhookWithHttpInfoAsync(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsApi : ISettingsApiSync, ISettingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsApi : IDisposable, ISettingsApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SettingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SettingsApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SettingsApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SettingsApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add depositor address. Verify signature and add a depositor address to the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <returns>PaymasterDepositorResponse</returns>
        public PaymasterDepositorResponse AddDepositorAddress(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest)
        {
            Openfort.Client.ApiResponse<PaymasterDepositorResponse> localVarResponse = AddDepositorAddressWithHttpInfo(paymasterDepositorCreateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add depositor address. Verify signature and add a depositor address to the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <returns>ApiResponse of PaymasterDepositorResponse</returns>
        public Openfort.Client.ApiResponse<PaymasterDepositorResponse> AddDepositorAddressWithHttpInfo(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest)
        {
            // verify the required parameter 'paymasterDepositorCreateRequest' is set
            if (paymasterDepositorCreateRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'paymasterDepositorCreateRequest' when calling SettingsApi->AddDepositorAddress");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = paymasterDepositorCreateRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PaymasterDepositorResponse>("/v1/settings/depositor_addresses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDepositorAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add depositor address. Verify signature and add a depositor address to the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorResponse</returns>
        public async System.Threading.Tasks.Task<PaymasterDepositorResponse> AddDepositorAddressAsync(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = AddDepositorAddressWithHttpInfoAsync(paymasterDepositorCreateRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PaymasterDepositorResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PaymasterDepositorResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add depositor address. Verify signature and add a depositor address to the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paymasterDepositorCreateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PaymasterDepositorResponse>> AddDepositorAddressWithHttpInfoAsync(PaymasterDepositorCreateRequest paymasterDepositorCreateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'paymasterDepositorCreateRequest' is set
            if (paymasterDepositorCreateRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'paymasterDepositorCreateRequest' when calling SettingsApi->AddDepositorAddress");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = paymasterDepositorCreateRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PaymasterDepositorResponse>("/v1/settings/depositor_addresses", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddDepositorAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of depositor addresses. Retrieve the list of the depositor addresses for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PaymasterDepositorListResponse</returns>
        public PaymasterDepositorListResponse GetDepositorAddresses()
        {
            Openfort.Client.ApiResponse<PaymasterDepositorListResponse> localVarResponse = GetDepositorAddressesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of depositor addresses. Retrieve the list of the depositor addresses for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PaymasterDepositorListResponse</returns>
        public Openfort.Client.ApiResponse<PaymasterDepositorListResponse> GetDepositorAddressesWithHttpInfo()
        {
            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymasterDepositorListResponse>("/v1/settings/depositor_addresses", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDepositorAddresses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of depositor addresses. Retrieve the list of the depositor addresses for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorListResponse</returns>
        public async System.Threading.Tasks.Task<PaymasterDepositorListResponse> GetDepositorAddressesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetDepositorAddressesWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PaymasterDepositorListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PaymasterDepositorListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of depositor addresses. Retrieve the list of the depositor addresses for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PaymasterDepositorListResponse>> GetDepositorAddressesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PaymasterDepositorListResponse>("/v1/settings/depositor_addresses", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDepositorAddresses", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate message to sign Generate message, which should be signed for verification of the address ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <returns>PaymasterDepositorGetMessageResponse</returns>
        public PaymasterDepositorGetMessageResponse GetMessageForSigningDepositorAddress(string address)
        {
            Openfort.Client.ApiResponse<PaymasterDepositorGetMessageResponse> localVarResponse = GetMessageForSigningDepositorAddressWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate message to sign Generate message, which should be signed for verification of the address ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <returns>ApiResponse of PaymasterDepositorGetMessageResponse</returns>
        public Openfort.Client.ApiResponse<PaymasterDepositorGetMessageResponse> GetMessageForSigningDepositorAddressWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'address' when calling SettingsApi->GetMessageForSigningDepositorAddress");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaymasterDepositorGetMessageResponse>("/v1/settings/depositor_addresses/message_to_sign", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageForSigningDepositorAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate message to sign Generate message, which should be signed for verification of the address ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorGetMessageResponse</returns>
        public async System.Threading.Tasks.Task<PaymasterDepositorGetMessageResponse> GetMessageForSigningDepositorAddressAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetMessageForSigningDepositorAddressWithHttpInfoAsync(address, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PaymasterDepositorGetMessageResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PaymasterDepositorGetMessageResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate message to sign Generate message, which should be signed for verification of the address ownership.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Specifies the paymaster depositor address</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorGetMessageResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PaymasterDepositorGetMessageResponse>> GetMessageForSigningDepositorAddressWithHttpInfoAsync(string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'address' when calling SettingsApi->GetMessageForSigningDepositorAddress");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "address", address));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PaymasterDepositorGetMessageResponse>("/v1/settings/depositor_addresses/message_to_sign", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageForSigningDepositorAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes depositor address. Remove a depositor address from the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <returns>PaymasterDepositorDeleteResponse</returns>
        public PaymasterDepositorDeleteResponse RemoveDepositorAddress(string id)
        {
            Openfort.Client.ApiResponse<PaymasterDepositorDeleteResponse> localVarResponse = RemoveDepositorAddressWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes depositor address. Remove a depositor address from the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <returns>ApiResponse of PaymasterDepositorDeleteResponse</returns>
        public Openfort.Client.ApiResponse<PaymasterDepositorDeleteResponse> RemoveDepositorAddressWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling SettingsApi->RemoveDepositorAddress");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<PaymasterDepositorDeleteResponse>("/v1/settings/depositor_addresses/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveDepositorAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes depositor address. Remove a depositor address from the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaymasterDepositorDeleteResponse</returns>
        public async System.Threading.Tasks.Task<PaymasterDepositorDeleteResponse> RemoveDepositorAddressAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RemoveDepositorAddressWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PaymasterDepositorDeleteResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PaymasterDepositorDeleteResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Removes depositor address. Remove a depositor address from the current project environment.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies unique identifier of depositor address.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaymasterDepositorDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PaymasterDepositorDeleteResponse>> RemoveDepositorAddressWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling SettingsApi->RemoveDepositorAddress");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<PaymasterDepositorDeleteResponse>("/v1/settings/depositor_addresses/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveDepositorAddress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes webhook. Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void RemoveWebhook()
        {
            RemoveWebhookWithHttpInfo();
        }

        /// <summary>
        /// Removes webhook. Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Openfort.Client.ApiResponse<Object> RemoveWebhookWithHttpInfo()
        {
            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/settings/webhook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Removes webhook. Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveWebhookAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RemoveWebhookWithHttpInfoAsync(cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        /// Removes webhook. Updated the current project environment settings by removing the webhook address. After that system will stop sending events of the transaction intent state changes
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Object>> RemoveWebhookWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<Object>("/v1/settings/webhook", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update webhook. Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <returns></returns>
        public void UpdateWebhook(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest)
        {
            UpdateWebhookWithHttpInfo(settingsWebhookUpdateRequest);
        }

        /// <summary>
        /// Update webhook. Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Openfort.Client.ApiResponse<Object> UpdateWebhookWithHttpInfo(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest)
        {
            // verify the required parameter 'settingsWebhookUpdateRequest' is set
            if (settingsWebhookUpdateRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'settingsWebhookUpdateRequest' when calling SettingsApi->UpdateWebhook");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = settingsWebhookUpdateRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/settings/webhook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update webhook. Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateWebhookAsync(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdateWebhookWithHttpInfoAsync(settingsWebhookUpdateRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            await task.ConfigureAwait(false);
#else
            await task;
#endif
        }

        /// <summary>
        /// Update webhook. Updated the current project environment settings by assigning the webhook address. This address is used to send events about the changes of the transaction intent state.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsWebhookUpdateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<Object>> UpdateWebhookWithHttpInfoAsync(SettingsWebhookUpdateRequest settingsWebhookUpdateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'settingsWebhookUpdateRequest' is set
            if (settingsWebhookUpdateRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'settingsWebhookUpdateRequest' when calling SettingsApi->UpdateWebhook");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = settingsWebhookUpdateRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Object>("/v1/settings/webhook", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
