/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// RegisterPlayerEncryptedKeyRequest
    /// </summary>
    [DataContract(Name = "RegisterPlayerEncryptedKeyRequest")]
    public partial class RegisterPlayerEncryptedKeyRequest : IEquatable<RegisterPlayerEncryptedKeyRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterPlayerEncryptedKeyRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterPlayerEncryptedKeyRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterPlayerEncryptedKeyRequest" /> class.
        /// </summary>
        /// <param name="pkCiphertext">The cipher text of the key to register. (required).</param>
        /// <param name="salt">The salt used expand the password of the user. (required).</param>
        /// <param name="ownerAddress">The address of the owner. (required).</param>
        public RegisterPlayerEncryptedKeyRequest(string pkCiphertext = default(string), string salt = default(string), string ownerAddress = default(string))
        {
            // to ensure "pkCiphertext" is required (not null)
            if (pkCiphertext == null)
            {
                throw new ArgumentNullException("pkCiphertext is a required property for RegisterPlayerEncryptedKeyRequest and cannot be null");
            }
            this.PkCiphertext = pkCiphertext;
            // to ensure "salt" is required (not null)
            if (salt == null)
            {
                throw new ArgumentNullException("salt is a required property for RegisterPlayerEncryptedKeyRequest and cannot be null");
            }
            this.Salt = salt;
            // to ensure "ownerAddress" is required (not null)
            if (ownerAddress == null)
            {
                throw new ArgumentNullException("ownerAddress is a required property for RegisterPlayerEncryptedKeyRequest and cannot be null");
            }
            this.OwnerAddress = ownerAddress;
        }

        /// <summary>
        /// The cipher text of the key to register.
        /// </summary>
        /// <value>The cipher text of the key to register.</value>
        [DataMember(Name = "pk_ciphertext", IsRequired = true, EmitDefaultValue = true)]
        public string PkCiphertext { get; set; }

        /// <summary>
        /// The salt used expand the password of the user.
        /// </summary>
        /// <value>The salt used expand the password of the user.</value>
        [DataMember(Name = "salt", IsRequired = true, EmitDefaultValue = true)]
        public string Salt { get; set; }

        /// <summary>
        /// The address of the owner.
        /// </summary>
        /// <value>The address of the owner.</value>
        [DataMember(Name = "owner_address", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterPlayerEncryptedKeyRequest {\n");
            sb.Append("  PkCiphertext: ").Append(PkCiphertext).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  OwnerAddress: ").Append(OwnerAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterPlayerEncryptedKeyRequest);
        }

        /// <summary>
        /// Returns true if RegisterPlayerEncryptedKeyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterPlayerEncryptedKeyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterPlayerEncryptedKeyRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PkCiphertext == input.PkCiphertext ||
                    (this.PkCiphertext != null &&
                    this.PkCiphertext.Equals(input.PkCiphertext))
                ) && 
                (
                    this.Salt == input.Salt ||
                    (this.Salt != null &&
                    this.Salt.Equals(input.Salt))
                ) && 
                (
                    this.OwnerAddress == input.OwnerAddress ||
                    (this.OwnerAddress != null &&
                    this.OwnerAddress.Equals(input.OwnerAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PkCiphertext != null)
                {
                    hashCode = (hashCode * 59) + this.PkCiphertext.GetHashCode();
                }
                if (this.Salt != null)
                {
                    hashCode = (hashCode * 59) + this.Salt.GetHashCode();
                }
                if (this.OwnerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerAddress.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
