/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// GasReportDataInnerTransactionIntentsInner
    /// </summary>
    [DataContract(Name = "GasReport_data_inner_transactionIntents_inner")]
    public partial class GasReportDataInnerTransactionIntentsInner : IEquatable<GasReportDataInnerTransactionIntentsInner>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GasReportDataInnerTransactionIntentsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GasReportDataInnerTransactionIntentsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GasReportDataInnerTransactionIntentsInner" /> class.
        /// </summary>
        /// <param name="gasFeeInUSD">gasFeeInUSD (required).</param>
        /// <param name="gasUsed">gasUsed (required).</param>
        /// <param name="gasPrice">gasPrice (required).</param>
        /// <param name="gasFee">gasFee (required).</param>
        /// <param name="transactionIntentId">transactionIntentId (required).</param>
        public GasReportDataInnerTransactionIntentsInner(string gasFeeInUSD = default(string), string gasUsed = default(string), string gasPrice = default(string), string gasFee = default(string), string transactionIntentId = default(string))
        {
            // to ensure "gasFeeInUSD" is required (not null)
            if (gasFeeInUSD == null)
            {
                throw new ArgumentNullException("gasFeeInUSD is a required property for GasReportDataInnerTransactionIntentsInner and cannot be null");
            }
            this.GasFeeInUSD = gasFeeInUSD;
            // to ensure "gasUsed" is required (not null)
            if (gasUsed == null)
            {
                throw new ArgumentNullException("gasUsed is a required property for GasReportDataInnerTransactionIntentsInner and cannot be null");
            }
            this.GasUsed = gasUsed;
            // to ensure "gasPrice" is required (not null)
            if (gasPrice == null)
            {
                throw new ArgumentNullException("gasPrice is a required property for GasReportDataInnerTransactionIntentsInner and cannot be null");
            }
            this.GasPrice = gasPrice;
            // to ensure "gasFee" is required (not null)
            if (gasFee == null)
            {
                throw new ArgumentNullException("gasFee is a required property for GasReportDataInnerTransactionIntentsInner and cannot be null");
            }
            this.GasFee = gasFee;
            // to ensure "transactionIntentId" is required (not null)
            if (transactionIntentId == null)
            {
                throw new ArgumentNullException("transactionIntentId is a required property for GasReportDataInnerTransactionIntentsInner and cannot be null");
            }
            this.TransactionIntentId = transactionIntentId;
        }

        /// <summary>
        /// Gets or Sets GasFeeInUSD
        /// </summary>
        [DataMember(Name = "gasFeeInUSD", IsRequired = true, EmitDefaultValue = true)]
        public string GasFeeInUSD { get; set; }

        /// <summary>
        /// Gets or Sets GasUsed
        /// </summary>
        [DataMember(Name = "gasUsed", IsRequired = true, EmitDefaultValue = true)]
        public string GasUsed { get; set; }

        /// <summary>
        /// Gets or Sets GasPrice
        /// </summary>
        [DataMember(Name = "gasPrice", IsRequired = true, EmitDefaultValue = true)]
        public string GasPrice { get; set; }

        /// <summary>
        /// Gets or Sets GasFee
        /// </summary>
        [DataMember(Name = "gasFee", IsRequired = true, EmitDefaultValue = true)]
        public string GasFee { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIntentId
        /// </summary>
        [DataMember(Name = "transactionIntentId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionIntentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GasReportDataInnerTransactionIntentsInner {\n");
            sb.Append("  GasFeeInUSD: ").Append(GasFeeInUSD).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("  GasFee: ").Append(GasFee).Append("\n");
            sb.Append("  TransactionIntentId: ").Append(TransactionIntentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GasReportDataInnerTransactionIntentsInner);
        }

        /// <summary>
        /// Returns true if GasReportDataInnerTransactionIntentsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GasReportDataInnerTransactionIntentsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GasReportDataInnerTransactionIntentsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GasFeeInUSD == input.GasFeeInUSD ||
                    (this.GasFeeInUSD != null &&
                    this.GasFeeInUSD.Equals(input.GasFeeInUSD))
                ) && 
                (
                    this.GasUsed == input.GasUsed ||
                    (this.GasUsed != null &&
                    this.GasUsed.Equals(input.GasUsed))
                ) && 
                (
                    this.GasPrice == input.GasPrice ||
                    (this.GasPrice != null &&
                    this.GasPrice.Equals(input.GasPrice))
                ) && 
                (
                    this.GasFee == input.GasFee ||
                    (this.GasFee != null &&
                    this.GasFee.Equals(input.GasFee))
                ) && 
                (
                    this.TransactionIntentId == input.TransactionIntentId ||
                    (this.TransactionIntentId != null &&
                    this.TransactionIntentId.Equals(input.TransactionIntentId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GasFeeInUSD != null)
                {
                    hashCode = (hashCode * 59) + this.GasFeeInUSD.GetHashCode();
                }
                if (this.GasUsed != null)
                {
                    hashCode = (hashCode * 59) + this.GasUsed.GetHashCode();
                }
                if (this.GasPrice != null)
                {
                    hashCode = (hashCode * 59) + this.GasPrice.GetHashCode();
                }
                if (this.GasFee != null)
                {
                    hashCode = (hashCode * 59) + this.GasFee.GetHashCode();
                }
                if (this.TransactionIntentId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionIntentId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
