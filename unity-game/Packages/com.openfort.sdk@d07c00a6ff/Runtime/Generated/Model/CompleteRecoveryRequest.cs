/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// CompleteRecoveryRequest
    /// </summary>
    [DataContract(Name = "CompleteRecoveryRequest")]
    public partial class CompleteRecoveryRequest : IEquatable<CompleteRecoveryRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteRecoveryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompleteRecoveryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompleteRecoveryRequest" /> class.
        /// </summary>
        /// <param name="newOwnerAddress">Address of the new owner (required).</param>
        /// <param name="signatures">Signatures.</param>
        /// <param name="policy">The policy ID (starts with pol_) (required).</param>
        public CompleteRecoveryRequest(string newOwnerAddress = default(string), List<string> signatures = default(List<string>), string policy = default(string))
        {
            // to ensure "newOwnerAddress" is required (not null)
            if (newOwnerAddress == null)
            {
                throw new ArgumentNullException("newOwnerAddress is a required property for CompleteRecoveryRequest and cannot be null");
            }
            this.NewOwnerAddress = newOwnerAddress;
            // to ensure "policy" is required (not null)
            if (policy == null)
            {
                throw new ArgumentNullException("policy is a required property for CompleteRecoveryRequest and cannot be null");
            }
            this.Policy = policy;
            this.Signatures = signatures;
        }

        /// <summary>
        /// Address of the new owner
        /// </summary>
        /// <value>Address of the new owner</value>
        [DataMember(Name = "newOwnerAddress", IsRequired = true, EmitDefaultValue = true)]
        public string NewOwnerAddress { get; set; }

        /// <summary>
        /// Signatures
        /// </summary>
        /// <value>Signatures</value>
        [DataMember(Name = "signatures", EmitDefaultValue = false)]
        public List<string> Signatures { get; set; }

        /// <summary>
        /// The policy ID (starts with pol_)
        /// </summary>
        /// <value>The policy ID (starts with pol_)</value>
        [DataMember(Name = "policy", IsRequired = true, EmitDefaultValue = true)]
        public string Policy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CompleteRecoveryRequest {\n");
            sb.Append("  NewOwnerAddress: ").Append(NewOwnerAddress).Append("\n");
            sb.Append("  Signatures: ").Append(Signatures).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompleteRecoveryRequest);
        }

        /// <summary>
        /// Returns true if CompleteRecoveryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CompleteRecoveryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompleteRecoveryRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NewOwnerAddress == input.NewOwnerAddress ||
                    (this.NewOwnerAddress != null &&
                    this.NewOwnerAddress.Equals(input.NewOwnerAddress))
                ) && 
                (
                    this.Signatures == input.Signatures ||
                    this.Signatures != null &&
                    input.Signatures != null &&
                    this.Signatures.SequenceEqual(input.Signatures)
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NewOwnerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.NewOwnerAddress.GetHashCode();
                }
                if (this.Signatures != null)
                {
                    hashCode = (hashCode * 59) + this.Signatures.GetHashCode();
                }
                if (this.Policy != null)
                {
                    hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
