/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// SubmitWeb3ActionRequest
    /// </summary>
    [DataContract(Name = "SubmitWeb3ActionRequest")]
    public partial class SubmitWeb3ActionRequest : IEquatable<SubmitWeb3ActionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitWeb3ActionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubmitWeb3ActionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmitWeb3ActionRequest" /> class.
        /// </summary>
        /// <param name="approve">True to approve the action, false to reject it. (required).</param>
        /// <param name="policy">The policy ID (starts with pol_).</param>
        /// <param name="signature">signed data by the owner.</param>
        public SubmitWeb3ActionRequest(bool approve = default(bool), string policy = default(string), string signature = default(string))
        {
            this.Approve = approve;
            this.Policy = policy;
            this.Signature = signature;
        }

        /// <summary>
        /// True to approve the action, false to reject it.
        /// </summary>
        /// <value>True to approve the action, false to reject it.</value>
        [DataMember(Name = "approve", IsRequired = true, EmitDefaultValue = true)]
        public bool Approve { get; set; }

        /// <summary>
        /// The policy ID (starts with pol_)
        /// </summary>
        /// <value>The policy ID (starts with pol_)</value>
        [DataMember(Name = "policy", EmitDefaultValue = false)]
        public string Policy { get; set; }

        /// <summary>
        /// signed data by the owner
        /// </summary>
        /// <value>signed data by the owner</value>
        [DataMember(Name = "signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubmitWeb3ActionRequest {\n");
            sb.Append("  Approve: ").Append(Approve).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmitWeb3ActionRequest);
        }

        /// <summary>
        /// Returns true if SubmitWeb3ActionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmitWeb3ActionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmitWeb3ActionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Approve == input.Approve ||
                    this.Approve.Equals(input.Approve)
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Approve.GetHashCode();
                if (this.Policy != null)
                {
                    hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
