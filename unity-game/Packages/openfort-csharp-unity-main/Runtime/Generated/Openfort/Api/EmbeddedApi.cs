/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbeddedApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a device object.
        /// </summary>
        /// <remarks>
        /// Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <returns>DeviceResponse</returns>
        DeviceResponse CreateDevice(CreateDeviceRequest createDeviceRequest);

        /// <summary>
        /// Create a device object.
        /// </summary>
        /// <remarks>
        /// Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        ApiResponse<DeviceResponse> CreateDeviceWithHttpInfo(CreateDeviceRequest createDeviceRequest);
        /// <summary>
        /// Create a device share.
        /// </summary>
        /// <remarks>
        /// Add the share of for existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <returns>ShareResponse</returns>
        ShareResponse CreateDeviceShare(string id, CreateShareRequest createShareRequest);

        /// <summary>
        /// Create a device share.
        /// </summary>
        /// <remarks>
        /// Add the share of for existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <returns>ApiResponse of ShareResponse</returns>
        ApiResponse<ShareResponse> CreateDeviceShareWithHttpInfo(string id, CreateShareRequest createShareRequest);
        /// <summary>
        /// Get existing device shares.
        /// </summary>
        /// <remarks>
        /// Retrieves the shares of an existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <returns>BaseEntityListResponseShareResponse</returns>
        BaseEntityListResponseShareResponse GetDeviceShares(string id, string shareType = default(string));

        /// <summary>
        /// Get existing device shares.
        /// </summary>
        /// <remarks>
        /// Retrieves the shares of an existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <returns>ApiResponse of BaseEntityListResponseShareResponse</returns>
        ApiResponse<BaseEntityListResponseShareResponse> GetDeviceSharesWithHttpInfo(string id, string shareType = default(string));
        /// <summary>
        /// List devices of account.
        /// </summary>
        /// <remarks>
        /// Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>BaseEntityListResponseDeviceResponse</returns>
        BaseEntityListResponseDeviceResponse GetDevices(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?));

        /// <summary>
        /// List devices of account.
        /// </summary>
        /// <remarks>
        /// Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>ApiResponse of BaseEntityListResponseDeviceResponse</returns>
        ApiResponse<BaseEntityListResponseDeviceResponse> GetDevicesWithHttpInfo(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbeddedApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a device object.
        /// </summary>
        /// <remarks>
        /// Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        System.Threading.Tasks.Task<DeviceResponse> CreateDeviceAsync(CreateDeviceRequest createDeviceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a device object.
        /// </summary>
        /// <remarks>
        /// Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceResponse>> CreateDeviceWithHttpInfoAsync(CreateDeviceRequest createDeviceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a device share.
        /// </summary>
        /// <remarks>
        /// Add the share of for existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShareResponse</returns>
        System.Threading.Tasks.Task<ShareResponse> CreateDeviceShareAsync(string id, CreateShareRequest createShareRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a device share.
        /// </summary>
        /// <remarks>
        /// Add the share of for existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShareResponse>> CreateDeviceShareWithHttpInfoAsync(string id, CreateShareRequest createShareRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get existing device shares.
        /// </summary>
        /// <remarks>
        /// Retrieves the shares of an existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseShareResponse</returns>
        System.Threading.Tasks.Task<BaseEntityListResponseShareResponse> GetDeviceSharesAsync(string id, string shareType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get existing device shares.
        /// </summary>
        /// <remarks>
        /// Retrieves the shares of an existing device.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseShareResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseEntityListResponseShareResponse>> GetDeviceSharesWithHttpInfoAsync(string id, string shareType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List devices of account.
        /// </summary>
        /// <remarks>
        /// Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseDeviceResponse</returns>
        System.Threading.Tasks.Task<BaseEntityListResponseDeviceResponse> GetDevicesAsync(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List devices of account.
        /// </summary>
        /// <remarks>
        /// Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseDeviceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseEntityListResponseDeviceResponse>> GetDevicesWithHttpInfoAsync(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmbeddedApi : IEmbeddedApiSync, IEmbeddedApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmbeddedApi : IDisposable, IEmbeddedApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public EmbeddedApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public EmbeddedApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public EmbeddedApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmbeddedApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public EmbeddedApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a device object. Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <returns>DeviceResponse</returns>
        public DeviceResponse CreateDevice(CreateDeviceRequest createDeviceRequest)
        {
            Openfort.Client.ApiResponse<DeviceResponse> localVarResponse = CreateDeviceWithHttpInfo(createDeviceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a device object. Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <returns>ApiResponse of DeviceResponse</returns>
        public Openfort.Client.ApiResponse<DeviceResponse> CreateDeviceWithHttpInfo(CreateDeviceRequest createDeviceRequest)
        {
            // verify the required parameter 'createDeviceRequest' is set
            if (createDeviceRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createDeviceRequest' when calling EmbeddedApi->CreateDevice");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDeviceRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DeviceResponse>("/v1/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a device object. Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeviceResponse</returns>
        public async System.Threading.Tasks.Task<DeviceResponse> CreateDeviceAsync(CreateDeviceRequest createDeviceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateDeviceWithHttpInfoAsync(createDeviceRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<DeviceResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<DeviceResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a device object. Creates a new device for a given account.  This object represents the device that the account owner uses to store the device share. It has an equivalent auth share and recovery share associated with it.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeviceRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeviceResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<DeviceResponse>> CreateDeviceWithHttpInfoAsync(CreateDeviceRequest createDeviceRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDeviceRequest' is set
            if (createDeviceRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createDeviceRequest' when calling EmbeddedApi->CreateDevice");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createDeviceRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<DeviceResponse>("/v1/devices", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a device share. Add the share of for existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <returns>ShareResponse</returns>
        public ShareResponse CreateDeviceShare(string id, CreateShareRequest createShareRequest)
        {
            Openfort.Client.ApiResponse<ShareResponse> localVarResponse = CreateDeviceShareWithHttpInfo(id, createShareRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a device share. Add the share of for existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <returns>ApiResponse of ShareResponse</returns>
        public Openfort.Client.ApiResponse<ShareResponse> CreateDeviceShareWithHttpInfo(string id, CreateShareRequest createShareRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling EmbeddedApi->CreateDeviceShare");

            // verify the required parameter 'createShareRequest' is set
            if (createShareRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createShareRequest' when calling EmbeddedApi->CreateDeviceShare");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createShareRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ShareResponse>("/v1/devices/{id}/shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeviceShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a device share. Add the share of for existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShareResponse</returns>
        public async System.Threading.Tasks.Task<ShareResponse> CreateDeviceShareAsync(string id, CreateShareRequest createShareRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateDeviceShareWithHttpInfoAsync(id, createShareRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<ShareResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<ShareResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a device share. Add the share of for existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="createShareRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShareResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<ShareResponse>> CreateDeviceShareWithHttpInfoAsync(string id, CreateShareRequest createShareRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling EmbeddedApi->CreateDeviceShare");

            // verify the required parameter 'createShareRequest' is set
            if (createShareRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createShareRequest' when calling EmbeddedApi->CreateDeviceShare");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createShareRequest;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ShareResponse>("/v1/devices/{id}/shares", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeviceShare", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get existing device shares. Retrieves the shares of an existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <returns>BaseEntityListResponseShareResponse</returns>
        public BaseEntityListResponseShareResponse GetDeviceShares(string id, string shareType = default(string))
        {
            Openfort.Client.ApiResponse<BaseEntityListResponseShareResponse> localVarResponse = GetDeviceSharesWithHttpInfo(id, shareType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get existing device shares. Retrieves the shares of an existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <returns>ApiResponse of BaseEntityListResponseShareResponse</returns>
        public Openfort.Client.ApiResponse<BaseEntityListResponseShareResponse> GetDeviceSharesWithHttpInfo(string id, string shareType = default(string))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling EmbeddedApi->GetDeviceShares");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (shareType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "shareType", shareType));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BaseEntityListResponseShareResponse>("/v1/devices/{id}/shares", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeviceShares", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get existing device shares. Retrieves the shares of an existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseShareResponse</returns>
        public async System.Threading.Tasks.Task<BaseEntityListResponseShareResponse> GetDeviceSharesAsync(string id, string shareType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetDeviceSharesWithHttpInfoAsync(id, shareType, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<BaseEntityListResponseShareResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<BaseEntityListResponseShareResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get existing device shares. Retrieves the shares of an existing device.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique device ID (starts with dev_).</param>
        /// <param name="shareType">Specifies the type of the share ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseShareResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<BaseEntityListResponseShareResponse>> GetDeviceSharesWithHttpInfoAsync(string id, string shareType = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling EmbeddedApi->GetDeviceShares");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (shareType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "shareType", shareType));
            }


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<BaseEntityListResponseShareResponse>("/v1/devices/{id}/shares", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDeviceShares", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices of account. Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>BaseEntityListResponseDeviceResponse</returns>
        public BaseEntityListResponseDeviceResponse GetDevices(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?))
        {
            Openfort.Client.ApiResponse<BaseEntityListResponseDeviceResponse> localVarResponse = GetDevicesWithHttpInfo(account, limit, skip, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List devices of account. Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>ApiResponse of BaseEntityListResponseDeviceResponse</returns>
        public Openfort.Client.ApiResponse<BaseEntityListResponseDeviceResponse> GetDevicesWithHttpInfo(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?))
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'account' when calling EmbeddedApi->GetDevices");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "account", account));


            // make the HTTP request
            var localVarResponse = this.Client.Get<BaseEntityListResponseDeviceResponse>("/v1/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices of account. Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseDeviceResponse</returns>
        public async System.Threading.Tasks.Task<BaseEntityListResponseDeviceResponse> GetDevicesAsync(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetDevicesWithHttpInfoAsync(account, limit, skip, order, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<BaseEntityListResponseDeviceResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<BaseEntityListResponseDeviceResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List devices of account. Returns a list of devices for the given account.  This object represents the devices where the account owner has device share stored.  Devices are returned sorted by creation date, with the most recently created devices appearing first.  By default, a maximum of 10 devices are shown per page.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="account">Specifies the unique account ID (starts with acc_)</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseDeviceResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<BaseEntityListResponseDeviceResponse>> GetDevicesWithHttpInfoAsync(string account, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'account' is set
            if (account == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'account' when calling EmbeddedApi->GetDevices");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "account", account));


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<BaseEntityListResponseDeviceResponse>("/v1/devices", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
