/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Openfort.Client;
using Openfort.Model;

namespace Openfort.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse CreatePolicy(CreatePolicyRequest createPolicyRequest);

        /// <summary>
        /// Create a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo(CreatePolicyRequest createPolicyRequest);
        /// <summary>
        /// Withdraw tokens collected by policy.
        /// </summary>
        /// <remarks>
        /// Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        TransactionIntentResponse CreatePolicyWithdrawal(string id, WithdrawalPolicyRequest withdrawalPolicyRequest);

        /// <summary>
        /// Withdraw tokens collected by policy.
        /// </summary>
        /// <remarks>
        /// Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        ApiResponse<TransactionIntentResponse> CreatePolicyWithdrawalWithHttpInfo(string id, WithdrawalPolicyRequest withdrawalPolicyRequest);
        /// <summary>
        /// Delete a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyDeleteResponse</returns>
        PolicyDeleteResponse DeletePolicy(string id);

        /// <summary>
        /// Delete a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyDeleteResponse</returns>
        ApiResponse<PolicyDeleteResponse> DeletePolicyWithHttpInfo(string id);
        /// <summary>
        /// Disable a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse DisablePolicy(string id);

        /// <summary>
        /// Disable a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> DisablePolicyWithHttpInfo(string id);
        /// <summary>
        /// Enable a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse EnablePolicy(string id);

        /// <summary>
        /// Enable a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> EnablePolicyWithHttpInfo(string id);
        /// <summary>
        /// List policies.
        /// </summary>
        /// <remarks>
        /// Returns a list of Policies.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <returns>PolicyListResponse</returns>
        PolicyListResponse GetPolicies(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?));

        /// <summary>
        /// List policies.
        /// </summary>
        /// <remarks>
        /// Returns a list of Policies.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <returns>ApiResponse of PolicyListResponse</returns>
        ApiResponse<PolicyListResponse> GetPoliciesWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?));
        /// <summary>
        /// Get a policy object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Policy that has previously been created.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse GetPolicy(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>));

        /// <summary>
        /// Get a policy object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Policy that has previously been created.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> GetPolicyWithHttpInfo(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>));
        /// <summary>
        /// Get amount of tokens paid for gas policy.
        /// </summary>
        /// <remarks>
        /// Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyBalanceWithdrawResponse</returns>
        PolicyBalanceWithdrawResponse GetPolicyBalance(string id);

        /// <summary>
        /// Get amount of tokens paid for gas policy.
        /// </summary>
        /// <remarks>
        /// Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyBalanceWithdrawResponse</returns>
        ApiResponse<PolicyBalanceWithdrawResponse> GetPolicyBalanceWithHttpInfo(string id);
        /// <summary>
        /// List all gas reports of a policy.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>GasReportListResponse</returns>
        GasReportListResponse GetPolicyTotalGasUsage(string id);

        /// <summary>
        /// List all gas reports of a policy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of GasReportListResponse</returns>
        ApiResponse<GasReportListResponse> GetPolicyTotalGasUsageWithHttpInfo(string id);
        /// <summary>
        /// Update a policy object.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <returns>PolicyResponse</returns>
        PolicyResponse UpdatePolicy(string id, UpdatePolicyRequest updatePolicyRequest);

        /// <summary>
        /// Update a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo(string id, UpdatePolicyRequest updatePolicyRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync(CreatePolicyRequest createPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> CreatePolicyWithHttpInfoAsync(CreatePolicyRequest createPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Withdraw tokens collected by policy.
        /// </summary>
        /// <remarks>
        /// Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        System.Threading.Tasks.Task<TransactionIntentResponse> CreatePolicyWithdrawalAsync(string id, WithdrawalPolicyRequest withdrawalPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Withdraw tokens collected by policy.
        /// </summary>
        /// <remarks>
        /// Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionIntentResponse>> CreatePolicyWithdrawalWithHttpInfoAsync(string id, WithdrawalPolicyRequest withdrawalPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyDeleteResponse</returns>
        System.Threading.Tasks.Task<PolicyDeleteResponse> DeletePolicyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyDeleteResponse>> DeletePolicyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Disable a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> DisablePolicyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Disable a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> DisablePolicyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Enable a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> EnablePolicyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Enable a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> EnablePolicyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List policies.
        /// </summary>
        /// <remarks>
        /// Returns a list of Policies.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyListResponse</returns>
        System.Threading.Tasks.Task<PolicyListResponse> GetPoliciesAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List policies.
        /// </summary>
        /// <remarks>
        /// Returns a list of Policies.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyListResponse>> GetPoliciesWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a policy object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Policy that has previously been created.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a policy object.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of a Policy that has previously been created.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> GetPolicyWithHttpInfoAsync(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get amount of tokens paid for gas policy.
        /// </summary>
        /// <remarks>
        /// Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyBalanceWithdrawResponse</returns>
        System.Threading.Tasks.Task<PolicyBalanceWithdrawResponse> GetPolicyBalanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get amount of tokens paid for gas policy.
        /// </summary>
        /// <remarks>
        /// Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyBalanceWithdrawResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyBalanceWithdrawResponse>> GetPolicyBalanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all gas reports of a policy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GasReportListResponse</returns>
        System.Threading.Tasks.Task<GasReportListResponse> GetPolicyTotalGasUsageAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all gas reports of a policy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GasReportListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GasReportListResponse>> GetPolicyTotalGasUsageWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync(string id, UpdatePolicyRequest updatePolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a policy object.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PolicyResponse>> UpdatePolicyWithHttpInfoAsync(string id, UpdatePolicyRequest updatePolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesApi : IPoliciesApiSync, IPoliciesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliciesApi : IDisposable, IPoliciesApi
    {
        private Openfort.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public PoliciesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public PoliciesApi(string basePath)
        {
            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                new Openfort.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public PoliciesApi(Openfort.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.Client.Configuration.MergeConfigurations(
                Openfort.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public PoliciesApi(Openfort.Client.ISynchronousClient client, Openfort.Client.IAsynchronousClient asyncClient, Openfort.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse CreatePolicy(CreatePolicyRequest createPolicyRequest)
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = CreatePolicyWithHttpInfo(createPolicyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> CreatePolicyWithHttpInfo(CreatePolicyRequest createPolicyRequest)
        {
            // verify the required parameter 'createPolicyRequest' is set
            if (createPolicyRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createPolicyRequest' when calling PoliciesApi->CreatePolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createPolicyRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyResponse>("/v1/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> CreatePolicyAsync(CreatePolicyRequest createPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreatePolicyWithHttpInfoAsync(createPolicyRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> CreatePolicyWithHttpInfoAsync(CreatePolicyRequest createPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPolicyRequest' is set
            if (createPolicyRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'createPolicyRequest' when calling PoliciesApi->CreatePolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createPolicyRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PolicyResponse>("/v1/policies", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraw tokens collected by policy. Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <returns>TransactionIntentResponse</returns>
        public TransactionIntentResponse CreatePolicyWithdrawal(string id, WithdrawalPolicyRequest withdrawalPolicyRequest)
        {
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = CreatePolicyWithdrawalWithHttpInfo(id, withdrawalPolicyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw tokens collected by policy. Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <returns>ApiResponse of TransactionIntentResponse</returns>
        public Openfort.Client.ApiResponse<TransactionIntentResponse> CreatePolicyWithdrawalWithHttpInfo(string id, WithdrawalPolicyRequest withdrawalPolicyRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->CreatePolicyWithdrawal");

            // verify the required parameter 'withdrawalPolicyRequest' is set
            if (withdrawalPolicyRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'withdrawalPolicyRequest' when calling PoliciesApi->CreatePolicyWithdrawal");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = withdrawalPolicyRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionIntentResponse>("/v1/policies/{id}/withdraw", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyWithdrawal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Withdraw tokens collected by policy. Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionIntentResponse</returns>
        public async System.Threading.Tasks.Task<TransactionIntentResponse> CreatePolicyWithdrawalAsync(string id, WithdrawalPolicyRequest withdrawalPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreatePolicyWithdrawalWithHttpInfoAsync(id, withdrawalPolicyRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<TransactionIntentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw tokens collected by policy. Transfer ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="withdrawalPolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionIntentResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<TransactionIntentResponse>> CreatePolicyWithdrawalWithHttpInfoAsync(string id, WithdrawalPolicyRequest withdrawalPolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->CreatePolicyWithdrawal");

            // verify the required parameter 'withdrawalPolicyRequest' is set
            if (withdrawalPolicyRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'withdrawalPolicyRequest' when calling PoliciesApi->CreatePolicyWithdrawal");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = withdrawalPolicyRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransactionIntentResponse>("/v1/policies/{id}/withdraw", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePolicyWithdrawal", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyDeleteResponse</returns>
        public PolicyDeleteResponse DeletePolicy(string id)
        {
            Openfort.Client.ApiResponse<PolicyDeleteResponse> localVarResponse = DeletePolicyWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyDeleteResponse</returns>
        public Openfort.Client.ApiResponse<PolicyDeleteResponse> DeletePolicyWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->DeletePolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<PolicyDeleteResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyDeleteResponse</returns>
        public async System.Threading.Tasks.Task<PolicyDeleteResponse> DeletePolicyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DeletePolicyWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyDeleteResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyDeleteResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyDeleteResponse>> DeletePolicyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->DeletePolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<PolicyDeleteResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse DisablePolicy(string id)
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = DisablePolicyWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> DisablePolicyWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->DisablePolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PolicyResponse>("/v1/policies/{id}/disable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisablePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> DisablePolicyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DisablePolicyWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> DisablePolicyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->DisablePolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<PolicyResponse>("/v1/policies/{id}/disable", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisablePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse EnablePolicy(string id)
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = EnablePolicyWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> EnablePolicyWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->EnablePolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PolicyResponse>("/v1/policies/{id}/enable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnablePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> EnablePolicyAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = EnablePolicyWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> EnablePolicyWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->EnablePolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<PolicyResponse>("/v1/policies/{id}/enable", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnablePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List policies. Returns a list of Policies.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <returns>PolicyListResponse</returns>
        public PolicyListResponse GetPolicies(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?))
        {
            Openfort.Client.ApiResponse<PolicyListResponse> localVarResponse = GetPoliciesWithHttpInfo(limit, skip, order, expand, name, deleted, chainId, enabled);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List policies. Returns a list of Policies.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <returns>ApiResponse of PolicyListResponse</returns>
        public Openfort.Client.ApiResponse<PolicyListResponse> GetPoliciesWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?))
        {
            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (enabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PolicyListResponse>("/v1/policies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List policies. Returns a list of Policies.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyListResponse</returns>
        public async System.Threading.Tasks.Task<PolicyListResponse> GetPoliciesAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPoliciesWithHttpInfoAsync(limit, skip, order, expand, name, deleted, chainId, enabled, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List policies. Returns a list of Policies.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="expand">Specifies the fields to expand in the response. (optional)</param>
        /// <param name="name">Specifies the name of the policy. (optional)</param>
        /// <param name="deleted">Specifies whether to include deleted policies. (optional)</param>
        /// <param name="chainId">The chain ID of the policy. (optional)</param>
        /// <param name="enabled">Specifies whether to include enabled policies. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyListResponse>> GetPoliciesWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), string name = default(string), bool? deleted = default(bool?), int? chainId = default(int?), bool? enabled = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (deleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "deleted", deleted));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (enabled != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PolicyListResponse>("/v1/policies", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a policy object. Retrieves the details of a Policy that has previously been created.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse GetPolicy(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>))
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = GetPolicyWithHttpInfo(id, expand);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a policy object. Retrieves the details of a Policy that has previously been created.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> GetPolicyWithHttpInfo(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a policy object. Retrieves the details of a Policy that has previously been created.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> GetPolicyAsync(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPolicyWithHttpInfoAsync(id, expand, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a policy object. Retrieves the details of a Policy that has previously been created.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="expand">Specifies the fields to expand. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> GetPolicyWithHttpInfoAsync(string id, List<PolicyResponseExpandable> expand = default(List<PolicyResponseExpandable>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.Client.ClientUtils.ParameterToMultiMap("multi", "expand", expand));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get amount of tokens paid for gas policy. Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>PolicyBalanceWithdrawResponse</returns>
        public PolicyBalanceWithdrawResponse GetPolicyBalance(string id)
        {
            Openfort.Client.ApiResponse<PolicyBalanceWithdrawResponse> localVarResponse = GetPolicyBalanceWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get amount of tokens paid for gas policy. Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of PolicyBalanceWithdrawResponse</returns>
        public Openfort.Client.ApiResponse<PolicyBalanceWithdrawResponse> GetPolicyBalanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicyBalance");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PolicyBalanceWithdrawResponse>("/v1/policies/{id}/withdraw", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get amount of tokens paid for gas policy. Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyBalanceWithdrawResponse</returns>
        public async System.Threading.Tasks.Task<PolicyBalanceWithdrawResponse> GetPolicyBalanceAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPolicyBalanceWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyBalanceWithdrawResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyBalanceWithdrawResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get amount of tokens paid for gas policy. Get the amount of ERC-20 tokens collected by policy.  When using a policy that includes payment of gas in ERC-20 tokens, this endpoint returns the amount of tokens paid for gas. This is specific to a policy that doesn&#39;t use your own deposited tokens in the paymaster.
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyBalanceWithdrawResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyBalanceWithdrawResponse>> GetPolicyBalanceWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicyBalance");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<PolicyBalanceWithdrawResponse>("/v1/policies/{id}/withdraw", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyBalance", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all gas reports of a policy. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>GasReportListResponse</returns>
        public GasReportListResponse GetPolicyTotalGasUsage(string id)
        {
            Openfort.Client.ApiResponse<GasReportListResponse> localVarResponse = GetPolicyTotalGasUsageWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all gas reports of a policy. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <returns>ApiResponse of GasReportListResponse</returns>
        public Openfort.Client.ApiResponse<GasReportListResponse> GetPolicyTotalGasUsageWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicyTotalGasUsage");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GasReportListResponse>("/v1/policies/{id}/reports", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyTotalGasUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all gas reports of a policy. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GasReportListResponse</returns>
        public async System.Threading.Tasks.Task<GasReportListResponse> GetPolicyTotalGasUsageAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetPolicyTotalGasUsageWithHttpInfoAsync(id, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<GasReportListResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<GasReportListResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all gas reports of a policy. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GasReportListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<GasReportListResponse>> GetPolicyTotalGasUsageWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->GetPolicyTotalGasUsage");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GasReportListResponse>("/v1/policies/{id}/reports", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPolicyTotalGasUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <returns>PolicyResponse</returns>
        public PolicyResponse UpdatePolicy(string id, UpdatePolicyRequest updatePolicyRequest)
        {
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = UpdatePolicyWithHttpInfo(id, updatePolicyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <returns>ApiResponse of PolicyResponse</returns>
        public Openfort.Client.ApiResponse<PolicyResponse> UpdatePolicyWithHttpInfo(string id, UpdatePolicyRequest updatePolicyRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->UpdatePolicy");

            // verify the required parameter 'updatePolicyRequest' is set
            if (updatePolicyRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'updatePolicyRequest' when calling PoliciesApi->UpdatePolicy");

            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updatePolicyRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PolicyResponse</returns>
        public async System.Threading.Tasks.Task<PolicyResponse> UpdatePolicyAsync(string id, UpdatePolicyRequest updatePolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdatePolicyWithHttpInfoAsync(id, updatePolicyRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Openfort.Client.ApiResponse<PolicyResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a policy object. 
        /// </summary>
        /// <exception cref="Openfort.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique policy ID (starts with pol_).</param>
        /// <param name="updatePolicyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PolicyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.Client.ApiResponse<PolicyResponse>> UpdatePolicyWithHttpInfoAsync(string id, UpdatePolicyRequest updatePolicyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'id' when calling PoliciesApi->UpdatePolicy");

            // verify the required parameter 'updatePolicyRequest' is set
            if (updatePolicyRequest == null)
                throw new Openfort.Client.ApiException(400, "Missing required parameter 'updatePolicyRequest' when calling PoliciesApi->UpdatePolicy");


            Openfort.Client.RequestOptions localVarRequestOptions = new Openfort.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updatePolicyRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PolicyResponse>("/v1/policies/{id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePolicy", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
