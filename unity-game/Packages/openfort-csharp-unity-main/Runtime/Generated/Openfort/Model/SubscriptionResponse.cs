/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// SubscriptionResponse
    /// </summary>
    [DataContract(Name = "SubscriptionResponse")]
    public partial class SubscriptionResponse : IEquatable<SubscriptionResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscriptionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionResponse" /> class.
        /// </summary>
        /// <param name="currentPeriodEnd">currentPeriodEnd (required).</param>
        /// <param name="currentPeriodStart">currentPeriodStart (required).</param>
        /// <param name="canceledAt">canceledAt (required).</param>
        /// <param name="plan">plan (required).</param>
        public SubscriptionResponse(DateTime currentPeriodEnd = default(DateTime), DateTime currentPeriodStart = default(DateTime), DateTime canceledAt = default(DateTime), SubscriptionResponsePlan plan = default(SubscriptionResponsePlan))
        {
            this.CurrentPeriodEnd = currentPeriodEnd;
            this.CurrentPeriodStart = currentPeriodStart;
            this.CanceledAt = canceledAt;
            // to ensure "plan" is required (not null)
            if (plan == null)
            {
                throw new ArgumentNullException("plan is a required property for SubscriptionResponse and cannot be null");
            }
            this.Plan = plan;
        }

        /// <summary>
        /// Gets or Sets CurrentPeriodEnd
        /// </summary>
        [DataMember(Name = "currentPeriodEnd", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CurrentPeriodEnd { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPeriodStart
        /// </summary>
        [DataMember(Name = "currentPeriodStart", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CurrentPeriodStart { get; set; }

        /// <summary>
        /// Gets or Sets CanceledAt
        /// </summary>
        [DataMember(Name = "canceledAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CanceledAt { get; set; }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = true)]
        public SubscriptionResponsePlan Plan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionResponse {\n");
            sb.Append("  CurrentPeriodEnd: ").Append(CurrentPeriodEnd).Append("\n");
            sb.Append("  CurrentPeriodStart: ").Append(CurrentPeriodStart).Append("\n");
            sb.Append("  CanceledAt: ").Append(CanceledAt).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscriptionResponse);
        }

        /// <summary>
        /// Returns true if SubscriptionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscriptionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscriptionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrentPeriodEnd == input.CurrentPeriodEnd ||
                    (this.CurrentPeriodEnd != null &&
                    this.CurrentPeriodEnd.Equals(input.CurrentPeriodEnd))
                ) && 
                (
                    this.CurrentPeriodStart == input.CurrentPeriodStart ||
                    (this.CurrentPeriodStart != null &&
                    this.CurrentPeriodStart.Equals(input.CurrentPeriodStart))
                ) && 
                (
                    this.CanceledAt == input.CanceledAt ||
                    (this.CanceledAt != null &&
                    this.CanceledAt.Equals(input.CanceledAt))
                ) && 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentPeriodEnd != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentPeriodEnd.GetHashCode();
                }
                if (this.CurrentPeriodStart != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentPeriodStart.GetHashCode();
                }
                if (this.CanceledAt != null)
                {
                    hashCode = (hashCode * 59) + this.CanceledAt.GetHashCode();
                }
                if (this.Plan != null)
                {
                    hashCode = (hashCode * 59) + this.Plan.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
