/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// CreateShareRequest
    /// </summary>
    [DataContract(Name = "CreateShareRequest")]
    public partial class CreateShareRequest : IEquatable<CreateShareRequest>
    {

        /// <summary>
        /// Gets or Sets ShareType
        /// </summary>
        [DataMember(Name = "shareType", IsRequired = true, EmitDefaultValue = true)]
        public ShareType ShareType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShareRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateShareRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateShareRequest" /> class.
        /// </summary>
        /// <param name="share">Specifies the unique share ID (starts with sha_) (required).</param>
        /// <param name="shareType">shareType (required).</param>
        /// <param name="userEntropy">Specifies if the recovery share is encrypted by user entropy (required).</param>
        public CreateShareRequest(string share = default(string), ShareType shareType = default(ShareType), bool userEntropy = default(bool))
        {
            // to ensure "share" is required (not null)
            if (share == null)
            {
                throw new ArgumentNullException("share is a required property for CreateShareRequest and cannot be null");
            }
            this.Share = share;
            this.ShareType = shareType;
            this.UserEntropy = userEntropy;
        }

        /// <summary>
        /// Specifies the unique share ID (starts with sha_)
        /// </summary>
        /// <value>Specifies the unique share ID (starts with sha_)</value>
        /// <example>&quot;sha_6f6c9067-89fa-4fc8-ac72-c242a268c584&quot;</example>
        [DataMember(Name = "share", IsRequired = true, EmitDefaultValue = true)]
        public string Share { get; set; }

        /// <summary>
        /// Specifies if the recovery share is encrypted by user entropy
        /// </summary>
        /// <value>Specifies if the recovery share is encrypted by user entropy</value>
        /// <example>true</example>
        [DataMember(Name = "userEntropy", IsRequired = true, EmitDefaultValue = true)]
        public bool UserEntropy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateShareRequest {\n");
            sb.Append("  Share: ").Append(Share).Append("\n");
            sb.Append("  ShareType: ").Append(ShareType).Append("\n");
            sb.Append("  UserEntropy: ").Append(UserEntropy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateShareRequest);
        }

        /// <summary>
        /// Returns true if CreateShareRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateShareRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateShareRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Share == input.Share ||
                    (this.Share != null &&
                    this.Share.Equals(input.Share))
                ) && 
                (
                    this.ShareType == input.ShareType ||
                    this.ShareType.Equals(input.ShareType)
                ) && 
                (
                    this.UserEntropy == input.UserEntropy ||
                    this.UserEntropy.Equals(input.UserEntropy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Share != null)
                {
                    hashCode = (hashCode * 59) + this.Share.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShareType.GetHashCode();
                hashCode = (hashCode * 59) + this.UserEntropy.GetHashCode();
                return hashCode;
            }
        }

    }

}
