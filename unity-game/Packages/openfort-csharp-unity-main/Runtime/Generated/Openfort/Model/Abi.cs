/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// Abi
    /// </summary>
    [DataContract(Name = "Abi")]
    public partial class Abi : IEquatable<Abi>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Abi" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="anonymous">anonymous.</param>
        /// <param name="payable">payable.</param>
        /// <param name="constant">constant.</param>
        /// <param name="stateMutability">stateMutability.</param>
        /// <param name="gas">gas.</param>
        /// <param name="inputs">inputs.</param>
        /// <param name="outputs">outputs.</param>
        public Abi(string name = default(string), string type = default(string), bool anonymous = default(bool), bool payable = default(bool), bool constant = default(bool), string stateMutability = default(string), string gas = default(string), List<AbiType> inputs = default(List<AbiType>), List<AbiType> outputs = default(List<AbiType>))
        {
            this.Name = name;
            this.Type = type;
            this.Anonymous = anonymous;
            this.Payable = payable;
            this.Constant = constant;
            this.StateMutability = stateMutability;
            this.Gas = gas;
            this.Inputs = inputs;
            this.Outputs = outputs;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Anonymous
        /// </summary>
        [DataMember(Name = "anonymous", EmitDefaultValue = true)]
        public bool Anonymous { get; set; }

        /// <summary>
        /// Gets or Sets Payable
        /// </summary>
        [DataMember(Name = "payable", EmitDefaultValue = true)]
        public bool Payable { get; set; }

        /// <summary>
        /// Gets or Sets Constant
        /// </summary>
        [DataMember(Name = "constant", EmitDefaultValue = true)]
        public bool Constant { get; set; }

        /// <summary>
        /// Gets or Sets StateMutability
        /// </summary>
        [DataMember(Name = "stateMutability", EmitDefaultValue = false)]
        public string StateMutability { get; set; }

        /// <summary>
        /// Gets or Sets Gas
        /// </summary>
        [DataMember(Name = "gas", EmitDefaultValue = false)]
        public string Gas { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name = "inputs", EmitDefaultValue = false)]
        public List<AbiType> Inputs { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [DataMember(Name = "outputs", EmitDefaultValue = false)]
        public List<AbiType> Outputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Abi {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  Payable: ").Append(Payable).Append("\n");
            sb.Append("  Constant: ").Append(Constant).Append("\n");
            sb.Append("  StateMutability: ").Append(StateMutability).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Abi);
        }

        /// <summary>
        /// Returns true if Abi instances are equal
        /// </summary>
        /// <param name="input">Instance of Abi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Abi input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Anonymous == input.Anonymous ||
                    this.Anonymous.Equals(input.Anonymous)
                ) && 
                (
                    this.Payable == input.Payable ||
                    this.Payable.Equals(input.Payable)
                ) && 
                (
                    this.Constant == input.Constant ||
                    this.Constant.Equals(input.Constant)
                ) && 
                (
                    this.StateMutability == input.StateMutability ||
                    (this.StateMutability != null &&
                    this.StateMutability.Equals(input.StateMutability))
                ) && 
                (
                    this.Gas == input.Gas ||
                    (this.Gas != null &&
                    this.Gas.Equals(input.Gas))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    this.Inputs != null &&
                    input.Inputs != null &&
                    this.Inputs.SequenceEqual(input.Inputs)
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    this.Outputs != null &&
                    input.Outputs != null &&
                    this.Outputs.SequenceEqual(input.Outputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Anonymous.GetHashCode();
                hashCode = (hashCode * 59) + this.Payable.GetHashCode();
                hashCode = (hashCode * 59) + this.Constant.GetHashCode();
                if (this.StateMutability != null)
                {
                    hashCode = (hashCode * 59) + this.StateMutability.GetHashCode();
                }
                if (this.Gas != null)
                {
                    hashCode = (hashCode * 59) + this.Gas.GetHashCode();
                }
                if (this.Inputs != null)
                {
                    hashCode = (hashCode * 59) + this.Inputs.GetHashCode();
                }
                if (this.Outputs != null)
                {
                    hashCode = (hashCode * 59) + this.Outputs.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
