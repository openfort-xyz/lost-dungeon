/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// TransactionIntentListQueries
    /// </summary>
    [DataContract(Name = "TransactionIntentListQueries")]
    public partial class TransactionIntentListQueries : IEquatable<TransactionIntentListQueries>
    {

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public SortOrder? Order { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionIntentListQueries" /> class.
        /// </summary>
        /// <param name="limit">Specifies the maximum number of records to return..</param>
        /// <param name="skip">Specifies the offset for the first records to return..</param>
        /// <param name="order">order.</param>
        /// <param name="expand">Specifies the fields to expand in the response..</param>
        /// <param name="chainId">The chain ID. Must be a [supported chain](/chains)..</param>
        /// <param name="account">Filter by account ID or developer account (starts with acc_ or dac_ respectively)..</param>
        /// <param name="player">Filter by player ID (starts with pla_)..</param>
        /// <param name="status">Filter by successful (1) or failed (0) transaction intents..</param>
        /// <param name="policy">Filter by policy ID (starts with pol_)..</param>
        public TransactionIntentListQueries(int limit = default(int), int skip = default(int), SortOrder? order = default(SortOrder?), List<TransactionIntentResponseExpandable> expand = default(List<TransactionIntentResponseExpandable>), int chainId = default(int), List<string> account = default(List<string>), List<string> player = default(List<string>), double status = default(double), List<string> policy = default(List<string>))
        {
            this.Limit = limit;
            this.Skip = skip;
            this.Order = order;
            this.Expand = expand;
            this.ChainId = chainId;
            this.Account = account;
            this.Player = player;
            this.Status = status;
            this.Policy = policy;
        }

        /// <summary>
        /// Specifies the maximum number of records to return.
        /// </summary>
        /// <value>Specifies the maximum number of records to return.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Specifies the offset for the first records to return.
        /// </summary>
        /// <value>Specifies the offset for the first records to return.</value>
        [DataMember(Name = "skip", EmitDefaultValue = false)]
        public int Skip { get; set; }

        /// <summary>
        /// Specifies the fields to expand in the response.
        /// </summary>
        /// <value>Specifies the fields to expand in the response.</value>
        [DataMember(Name = "expand", EmitDefaultValue = false)]
        public List<TransactionIntentResponseExpandable> Expand { get; set; }

        /// <summary>
        /// The chain ID. Must be a [supported chain](/chains).
        /// </summary>
        /// <value>The chain ID. Must be a [supported chain](/chains).</value>
        /// <example>80001</example>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        public int ChainId { get; set; }

        /// <summary>
        /// Filter by account ID or developer account (starts with acc_ or dac_ respectively).
        /// </summary>
        /// <value>Filter by account ID or developer account (starts with acc_ or dac_ respectively).</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public List<string> Account { get; set; }

        /// <summary>
        /// Filter by player ID (starts with pla_).
        /// </summary>
        /// <value>Filter by player ID (starts with pla_).</value>
        [DataMember(Name = "player", EmitDefaultValue = false)]
        public List<string> Player { get; set; }

        /// <summary>
        /// Filter by successful (1) or failed (0) transaction intents.
        /// </summary>
        /// <value>Filter by successful (1) or failed (0) transaction intents.</value>
        /// <example>1</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public double Status { get; set; }

        /// <summary>
        /// Filter by policy ID (starts with pol_).
        /// </summary>
        /// <value>Filter by policy ID (starts with pol_).</value>
        [DataMember(Name = "policy", EmitDefaultValue = false)]
        public List<string> Policy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionIntentListQueries {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionIntentListQueries);
        }

        /// <summary>
        /// Returns true if TransactionIntentListQueries instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionIntentListQueries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionIntentListQueries input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Skip == input.Skip ||
                    this.Skip.Equals(input.Skip)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order.Equals(input.Order)
                ) && 
                (
                    this.Expand == input.Expand ||
                    this.Expand != null &&
                    input.Expand != null &&
                    this.Expand.SequenceEqual(input.Expand)
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) && 
                (
                    this.Account == input.Account ||
                    this.Account != null &&
                    input.Account != null &&
                    this.Account.SequenceEqual(input.Account)
                ) && 
                (
                    this.Player == input.Player ||
                    this.Player != null &&
                    input.Player != null &&
                    this.Player.SequenceEqual(input.Player)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Policy == input.Policy ||
                    this.Policy != null &&
                    input.Policy != null &&
                    this.Policy.SequenceEqual(input.Policy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.Skip.GetHashCode();
                hashCode = (hashCode * 59) + this.Order.GetHashCode();
                if (this.Expand != null)
                {
                    hashCode = (hashCode * 59) + this.Expand.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Player != null)
                {
                    hashCode = (hashCode * 59) + this.Player.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Policy != null)
                {
                    hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
