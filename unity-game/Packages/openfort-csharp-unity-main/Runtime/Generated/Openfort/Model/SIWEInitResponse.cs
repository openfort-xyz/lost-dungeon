/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// SIWEInitResponse
    /// </summary>
    [DataContract(Name = "SIWEInitResponse")]
    public partial class SIWEInitResponse : IEquatable<SIWEInitResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SIWEInitResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SIWEInitResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SIWEInitResponse" /> class.
        /// </summary>
        /// <param name="address">The address of the player. (required).</param>
        /// <param name="nonce">nonce (required).</param>
        /// <param name="expiresAt">expiresAt (required).</param>
        public SIWEInitResponse(string address = default(string), string nonce = default(string), double expiresAt = default(double))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for SIWEInitResponse and cannot be null");
            }
            this.Address = address;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for SIWEInitResponse and cannot be null");
            }
            this.Nonce = nonce;
            this.ExpiresAt = expiresAt;
        }

        /// <summary>
        /// The address of the player.
        /// </summary>
        /// <value>The address of the player.</value>
        /// <example>&quot;0x8C5cedA46A26214A52A9D7BF036Ad2F6255BdBE&quot;</example>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expiresAt", IsRequired = true, EmitDefaultValue = true)]
        public double ExpiresAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SIWEInitResponse {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SIWEInitResponse);
        }

        /// <summary>
        /// Returns true if SIWEInitResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SIWEInitResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SIWEInitResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    this.ExpiresAt.Equals(input.ExpiresAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                return hashCode;
            }
        }

    }

}
