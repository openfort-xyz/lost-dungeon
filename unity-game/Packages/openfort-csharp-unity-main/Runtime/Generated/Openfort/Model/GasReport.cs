/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// GasReport
    /// </summary>
    [DataContract(Name = "GasReport")]
    public partial class GasReport : IEquatable<GasReport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GasReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GasReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GasReport" /> class.
        /// </summary>
        /// <param name="period">period (required).</param>
        /// <param name="averageTransactionFee">averageTransactionFee (required).</param>
        /// <param name="totalTransactionFeeInCustomTokens">totalTransactionFeeInCustomTokens (required).</param>
        /// <param name="totalTransactionFee">totalTransactionFee (required).</param>
        /// <param name="totalTransactionFeeInUSD">totalTransactionFeeInUSD (required).</param>
        /// <param name="transactionIntents">transactionIntents (required).</param>
        public GasReport(MonthRange period = default(MonthRange), string averageTransactionFee = default(string), string totalTransactionFeeInCustomTokens = default(string), string totalTransactionFee = default(string), string totalTransactionFeeInUSD = default(string), List<GasReportTransactionIntentsInner> transactionIntents = default(List<GasReportTransactionIntentsInner>))
        {
            // to ensure "period" is required (not null)
            if (period == null)
            {
                throw new ArgumentNullException("period is a required property for GasReport and cannot be null");
            }
            this.Period = period;
            // to ensure "averageTransactionFee" is required (not null)
            if (averageTransactionFee == null)
            {
                throw new ArgumentNullException("averageTransactionFee is a required property for GasReport and cannot be null");
            }
            this.AverageTransactionFee = averageTransactionFee;
            // to ensure "totalTransactionFeeInCustomTokens" is required (not null)
            if (totalTransactionFeeInCustomTokens == null)
            {
                throw new ArgumentNullException("totalTransactionFeeInCustomTokens is a required property for GasReport and cannot be null");
            }
            this.TotalTransactionFeeInCustomTokens = totalTransactionFeeInCustomTokens;
            // to ensure "totalTransactionFee" is required (not null)
            if (totalTransactionFee == null)
            {
                throw new ArgumentNullException("totalTransactionFee is a required property for GasReport and cannot be null");
            }
            this.TotalTransactionFee = totalTransactionFee;
            // to ensure "totalTransactionFeeInUSD" is required (not null)
            if (totalTransactionFeeInUSD == null)
            {
                throw new ArgumentNullException("totalTransactionFeeInUSD is a required property for GasReport and cannot be null");
            }
            this.TotalTransactionFeeInUSD = totalTransactionFeeInUSD;
            // to ensure "transactionIntents" is required (not null)
            if (transactionIntents == null)
            {
                throw new ArgumentNullException("transactionIntents is a required property for GasReport and cannot be null");
            }
            this.TransactionIntents = transactionIntents;
        }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", IsRequired = true, EmitDefaultValue = true)]
        public MonthRange Period { get; set; }

        /// <summary>
        /// Gets or Sets AverageTransactionFee
        /// </summary>
        [DataMember(Name = "averageTransactionFee", IsRequired = true, EmitDefaultValue = true)]
        public string AverageTransactionFee { get; set; }

        /// <summary>
        /// Gets or Sets TotalTransactionFeeInCustomTokens
        /// </summary>
        [DataMember(Name = "totalTransactionFeeInCustomTokens", IsRequired = true, EmitDefaultValue = true)]
        public string TotalTransactionFeeInCustomTokens { get; set; }

        /// <summary>
        /// Gets or Sets TotalTransactionFee
        /// </summary>
        [DataMember(Name = "totalTransactionFee", IsRequired = true, EmitDefaultValue = true)]
        public string TotalTransactionFee { get; set; }

        /// <summary>
        /// Gets or Sets TotalTransactionFeeInUSD
        /// </summary>
        [DataMember(Name = "totalTransactionFeeInUSD", IsRequired = true, EmitDefaultValue = true)]
        public string TotalTransactionFeeInUSD { get; set; }

        /// <summary>
        /// Gets or Sets TransactionIntents
        /// </summary>
        [DataMember(Name = "transactionIntents", IsRequired = true, EmitDefaultValue = true)]
        public List<GasReportTransactionIntentsInner> TransactionIntents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GasReport {\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  AverageTransactionFee: ").Append(AverageTransactionFee).Append("\n");
            sb.Append("  TotalTransactionFeeInCustomTokens: ").Append(TotalTransactionFeeInCustomTokens).Append("\n");
            sb.Append("  TotalTransactionFee: ").Append(TotalTransactionFee).Append("\n");
            sb.Append("  TotalTransactionFeeInUSD: ").Append(TotalTransactionFeeInUSD).Append("\n");
            sb.Append("  TransactionIntents: ").Append(TransactionIntents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GasReport);
        }

        /// <summary>
        /// Returns true if GasReport instances are equal
        /// </summary>
        /// <param name="input">Instance of GasReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GasReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.AverageTransactionFee == input.AverageTransactionFee ||
                    (this.AverageTransactionFee != null &&
                    this.AverageTransactionFee.Equals(input.AverageTransactionFee))
                ) && 
                (
                    this.TotalTransactionFeeInCustomTokens == input.TotalTransactionFeeInCustomTokens ||
                    (this.TotalTransactionFeeInCustomTokens != null &&
                    this.TotalTransactionFeeInCustomTokens.Equals(input.TotalTransactionFeeInCustomTokens))
                ) && 
                (
                    this.TotalTransactionFee == input.TotalTransactionFee ||
                    (this.TotalTransactionFee != null &&
                    this.TotalTransactionFee.Equals(input.TotalTransactionFee))
                ) && 
                (
                    this.TotalTransactionFeeInUSD == input.TotalTransactionFeeInUSD ||
                    (this.TotalTransactionFeeInUSD != null &&
                    this.TotalTransactionFeeInUSD.Equals(input.TotalTransactionFeeInUSD))
                ) && 
                (
                    this.TransactionIntents == input.TransactionIntents ||
                    this.TransactionIntents != null &&
                    input.TransactionIntents != null &&
                    this.TransactionIntents.SequenceEqual(input.TransactionIntents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Period != null)
                {
                    hashCode = (hashCode * 59) + this.Period.GetHashCode();
                }
                if (this.AverageTransactionFee != null)
                {
                    hashCode = (hashCode * 59) + this.AverageTransactionFee.GetHashCode();
                }
                if (this.TotalTransactionFeeInCustomTokens != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTransactionFeeInCustomTokens.GetHashCode();
                }
                if (this.TotalTransactionFee != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTransactionFee.GetHashCode();
                }
                if (this.TotalTransactionFeeInUSD != null)
                {
                    hashCode = (hashCode * 59) + this.TotalTransactionFeeInUSD.GetHashCode();
                }
                if (this.TransactionIntents != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionIntents.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
