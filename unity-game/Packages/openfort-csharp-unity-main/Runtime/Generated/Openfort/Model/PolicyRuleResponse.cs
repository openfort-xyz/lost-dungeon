/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Openfort.Model
{
    /// <summary>
    /// PolicyRuleResponse
    /// </summary>
    [JsonConverter(typeof(PolicyRuleResponseJsonConverter))]
    [DataContract(Name = "PolicyRuleResponse")]
    public partial class PolicyRuleResponse : AbstractOpenAPISchema, IEquatable<PolicyRuleResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRuleResponse" /> class
        /// with the <see cref="ContractPolicyRuleResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ContractPolicyRuleResponse.</param>
        public PolicyRuleResponse(ContractPolicyRuleResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRuleResponse" /> class
        /// with the <see cref="AccountPolicyRuleResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AccountPolicyRuleResponse.</param>
        public PolicyRuleResponse(AccountPolicyRuleResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRuleResponse" /> class
        /// with the <see cref="GasPerTransactionLimitPolicyRuleResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GasPerTransactionLimitPolicyRuleResponse.</param>
        public PolicyRuleResponse(GasPerTransactionLimitPolicyRuleResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRuleResponse" /> class
        /// with the <see cref="GasPerIntervalLimitPolicyRuleResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of GasPerIntervalLimitPolicyRuleResponse.</param>
        public PolicyRuleResponse(GasPerIntervalLimitPolicyRuleResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRuleResponse" /> class
        /// with the <see cref="CountPerIntervalLimitPolicyRuleResponse" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CountPerIntervalLimitPolicyRuleResponse.</param>
        public PolicyRuleResponse(CountPerIntervalLimitPolicyRuleResponse actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AccountPolicyRuleResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ContractPolicyRuleResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(CountPerIntervalLimitPolicyRuleResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GasPerIntervalLimitPolicyRuleResponse))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(GasPerTransactionLimitPolicyRuleResponse))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AccountPolicyRuleResponse, ContractPolicyRuleResponse, CountPerIntervalLimitPolicyRuleResponse, GasPerIntervalLimitPolicyRuleResponse, GasPerTransactionLimitPolicyRuleResponse");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `ContractPolicyRuleResponse`. If the actual instance is not `ContractPolicyRuleResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ContractPolicyRuleResponse</returns>
        public ContractPolicyRuleResponse GetContractPolicyRuleResponse()
        {
            return (ContractPolicyRuleResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AccountPolicyRuleResponse`. If the actual instance is not `AccountPolicyRuleResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AccountPolicyRuleResponse</returns>
        public AccountPolicyRuleResponse GetAccountPolicyRuleResponse()
        {
            return (AccountPolicyRuleResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GasPerTransactionLimitPolicyRuleResponse`. If the actual instance is not `GasPerTransactionLimitPolicyRuleResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GasPerTransactionLimitPolicyRuleResponse</returns>
        public GasPerTransactionLimitPolicyRuleResponse GetGasPerTransactionLimitPolicyRuleResponse()
        {
            return (GasPerTransactionLimitPolicyRuleResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `GasPerIntervalLimitPolicyRuleResponse`. If the actual instance is not `GasPerIntervalLimitPolicyRuleResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of GasPerIntervalLimitPolicyRuleResponse</returns>
        public GasPerIntervalLimitPolicyRuleResponse GetGasPerIntervalLimitPolicyRuleResponse()
        {
            return (GasPerIntervalLimitPolicyRuleResponse)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CountPerIntervalLimitPolicyRuleResponse`. If the actual instance is not `CountPerIntervalLimitPolicyRuleResponse`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CountPerIntervalLimitPolicyRuleResponse</returns>
        public CountPerIntervalLimitPolicyRuleResponse GetCountPerIntervalLimitPolicyRuleResponse()
        {
            return (CountPerIntervalLimitPolicyRuleResponse)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyRuleResponse {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, PolicyRuleResponse.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of PolicyRuleResponse
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of PolicyRuleResponse</returns>
        public static PolicyRuleResponse FromJson(string jsonString)
        {
            PolicyRuleResponse newPolicyRuleResponse = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newPolicyRuleResponse;
            }

            try
            {
                newPolicyRuleResponse = new PolicyRuleResponse(JsonConvert.DeserializeObject<AccountPolicyRuleResponse>(jsonString, PolicyRuleResponse.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newPolicyRuleResponse;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AccountPolicyRuleResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newPolicyRuleResponse = new PolicyRuleResponse(JsonConvert.DeserializeObject<ContractPolicyRuleResponse>(jsonString, PolicyRuleResponse.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newPolicyRuleResponse;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ContractPolicyRuleResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newPolicyRuleResponse = new PolicyRuleResponse(JsonConvert.DeserializeObject<CountPerIntervalLimitPolicyRuleResponse>(jsonString, PolicyRuleResponse.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newPolicyRuleResponse;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CountPerIntervalLimitPolicyRuleResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newPolicyRuleResponse = new PolicyRuleResponse(JsonConvert.DeserializeObject<GasPerIntervalLimitPolicyRuleResponse>(jsonString, PolicyRuleResponse.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newPolicyRuleResponse;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GasPerIntervalLimitPolicyRuleResponse: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newPolicyRuleResponse = new PolicyRuleResponse(JsonConvert.DeserializeObject<GasPerTransactionLimitPolicyRuleResponse>(jsonString, PolicyRuleResponse.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newPolicyRuleResponse;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into GasPerTransactionLimitPolicyRuleResponse: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyRuleResponse);
        }

        /// <summary>
        /// Returns true if PolicyRuleResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyRuleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyRuleResponse input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

    }

    /// <summary>
    /// Custom JSON converter for PolicyRuleResponse
    /// </summary>
    public class PolicyRuleResponseJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(PolicyRuleResponse).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return PolicyRuleResponse.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
