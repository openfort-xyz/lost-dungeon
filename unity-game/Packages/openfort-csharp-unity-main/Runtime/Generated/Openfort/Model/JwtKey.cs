/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// JwtKey
    /// </summary>
    [DataContract(Name = "JwtKey")]
    public partial class JwtKey : IEquatable<JwtKey>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JwtKey" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JwtKey() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JwtKey" /> class.
        /// </summary>
        /// <param name="kty">kty (required).</param>
        /// <param name="x">x (required).</param>
        /// <param name="y">y (required).</param>
        /// <param name="crv">crv (required).</param>
        /// <param name="kid">kid (required).</param>
        /// <param name="use">use (required).</param>
        /// <param name="alg">alg (required).</param>
        public JwtKey(string kty = default(string), string x = default(string), string y = default(string), string crv = default(string), string kid = default(string), string use = default(string), string alg = default(string))
        {
            // to ensure "kty" is required (not null)
            if (kty == null)
            {
                throw new ArgumentNullException("kty is a required property for JwtKey and cannot be null");
            }
            this.Kty = kty;
            // to ensure "x" is required (not null)
            if (x == null)
            {
                throw new ArgumentNullException("x is a required property for JwtKey and cannot be null");
            }
            this.X = x;
            // to ensure "y" is required (not null)
            if (y == null)
            {
                throw new ArgumentNullException("y is a required property for JwtKey and cannot be null");
            }
            this.Y = y;
            // to ensure "crv" is required (not null)
            if (crv == null)
            {
                throw new ArgumentNullException("crv is a required property for JwtKey and cannot be null");
            }
            this.Crv = crv;
            // to ensure "kid" is required (not null)
            if (kid == null)
            {
                throw new ArgumentNullException("kid is a required property for JwtKey and cannot be null");
            }
            this.Kid = kid;
            // to ensure "use" is required (not null)
            if (use == null)
            {
                throw new ArgumentNullException("use is a required property for JwtKey and cannot be null");
            }
            this.Use = use;
            // to ensure "alg" is required (not null)
            if (alg == null)
            {
                throw new ArgumentNullException("alg is a required property for JwtKey and cannot be null");
            }
            this.Alg = alg;
        }

        /// <summary>
        /// Gets or Sets Kty
        /// </summary>
        [DataMember(Name = "kty", IsRequired = true, EmitDefaultValue = true)]
        public string Kty { get; set; }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", IsRequired = true, EmitDefaultValue = true)]
        public string X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", IsRequired = true, EmitDefaultValue = true)]
        public string Y { get; set; }

        /// <summary>
        /// Gets or Sets Crv
        /// </summary>
        [DataMember(Name = "crv", IsRequired = true, EmitDefaultValue = true)]
        public string Crv { get; set; }

        /// <summary>
        /// Gets or Sets Kid
        /// </summary>
        [DataMember(Name = "kid", IsRequired = true, EmitDefaultValue = true)]
        public string Kid { get; set; }

        /// <summary>
        /// Gets or Sets Use
        /// </summary>
        [DataMember(Name = "use", IsRequired = true, EmitDefaultValue = true)]
        public string Use { get; set; }

        /// <summary>
        /// Gets or Sets Alg
        /// </summary>
        [DataMember(Name = "alg", IsRequired = true, EmitDefaultValue = true)]
        public string Alg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JwtKey {\n");
            sb.Append("  Kty: ").Append(Kty).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Crv: ").Append(Crv).Append("\n");
            sb.Append("  Kid: ").Append(Kid).Append("\n");
            sb.Append("  Use: ").Append(Use).Append("\n");
            sb.Append("  Alg: ").Append(Alg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JwtKey);
        }

        /// <summary>
        /// Returns true if JwtKey instances are equal
        /// </summary>
        /// <param name="input">Instance of JwtKey to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JwtKey input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Kty == input.Kty ||
                    (this.Kty != null &&
                    this.Kty.Equals(input.Kty))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Crv == input.Crv ||
                    (this.Crv != null &&
                    this.Crv.Equals(input.Crv))
                ) && 
                (
                    this.Kid == input.Kid ||
                    (this.Kid != null &&
                    this.Kid.Equals(input.Kid))
                ) && 
                (
                    this.Use == input.Use ||
                    (this.Use != null &&
                    this.Use.Equals(input.Use))
                ) && 
                (
                    this.Alg == input.Alg ||
                    (this.Alg != null &&
                    this.Alg.Equals(input.Alg))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Kty != null)
                {
                    hashCode = (hashCode * 59) + this.Kty.GetHashCode();
                }
                if (this.X != null)
                {
                    hashCode = (hashCode * 59) + this.X.GetHashCode();
                }
                if (this.Y != null)
                {
                    hashCode = (hashCode * 59) + this.Y.GetHashCode();
                }
                if (this.Crv != null)
                {
                    hashCode = (hashCode * 59) + this.Crv.GetHashCode();
                }
                if (this.Kid != null)
                {
                    hashCode = (hashCode * 59) + this.Kid.GetHashCode();
                }
                if (this.Use != null)
                {
                    hashCode = (hashCode * 59) + this.Use.GetHashCode();
                }
                if (this.Alg != null)
                {
                    hashCode = (hashCode * 59) + this.Alg.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
