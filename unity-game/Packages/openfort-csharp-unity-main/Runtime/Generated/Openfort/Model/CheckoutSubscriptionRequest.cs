/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// CheckoutSubscriptionRequest
    /// </summary>
    [DataContract(Name = "CheckoutSubscriptionRequest")]
    public partial class CheckoutSubscriptionRequest : IEquatable<CheckoutSubscriptionRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutSubscriptionRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CheckoutSubscriptionRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckoutSubscriptionRequest" /> class.
        /// </summary>
        /// <param name="plan">plan (required).</param>
        /// <param name="cancelUrl">cancelUrl.</param>
        /// <param name="successUrl">successUrl.</param>
        public CheckoutSubscriptionRequest(string plan = default(string), string cancelUrl = default(string), string successUrl = default(string))
        {
            // to ensure "plan" is required (not null)
            if (plan == null)
            {
                throw new ArgumentNullException("plan is a required property for CheckoutSubscriptionRequest and cannot be null");
            }
            this.Plan = plan;
            this.CancelUrl = cancelUrl;
            this.SuccessUrl = successUrl;
        }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name = "plan", IsRequired = true, EmitDefaultValue = true)]
        public string Plan { get; set; }

        /// <summary>
        /// Gets or Sets CancelUrl
        /// </summary>
        [DataMember(Name = "cancelUrl", EmitDefaultValue = false)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Gets or Sets SuccessUrl
        /// </summary>
        [DataMember(Name = "successUrl", EmitDefaultValue = false)]
        public string SuccessUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckoutSubscriptionRequest {\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  SuccessUrl: ").Append(SuccessUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckoutSubscriptionRequest);
        }

        /// <summary>
        /// Returns true if CheckoutSubscriptionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckoutSubscriptionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckoutSubscriptionRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                ) && 
                (
                    this.CancelUrl == input.CancelUrl ||
                    (this.CancelUrl != null &&
                    this.CancelUrl.Equals(input.CancelUrl))
                ) && 
                (
                    this.SuccessUrl == input.SuccessUrl ||
                    (this.SuccessUrl != null &&
                    this.SuccessUrl.Equals(input.SuccessUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Plan != null)
                {
                    hashCode = (hashCode * 59) + this.Plan.GetHashCode();
                }
                if (this.CancelUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CancelUrl.GetHashCode();
                }
                if (this.SuccessUrl != null)
                {
                    hashCode = (hashCode * 59) + this.SuccessUrl.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
