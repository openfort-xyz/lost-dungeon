/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// DeveloperAccountCreateRequest
    /// </summary>
    [DataContract(Name = "DeveloperAccountCreateRequest")]
    public partial class DeveloperAccountCreateRequest : IEquatable<DeveloperAccountCreateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeveloperAccountCreateRequest" /> class.
        /// </summary>
        /// <param name="address">The address of the wallet that has deposited funds in the paymaster..</param>
        /// <param name="signature">Signature to verify the account ownership..</param>
        /// <param name="name">The name of the account..</param>
        public DeveloperAccountCreateRequest(string address = default(string), string signature = default(string), string name = default(string))
        {
            this.Address = address;
            this.Signature = signature;
            this.Name = name;
        }

        /// <summary>
        /// The address of the wallet that has deposited funds in the paymaster.
        /// </summary>
        /// <value>The address of the wallet that has deposited funds in the paymaster.</value>
        /// <example>&quot;0x662D24Bf7Ea2dD6a7D0935F680a6056b94fE934d&quot;</example>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Signature to verify the account ownership.
        /// </summary>
        /// <value>Signature to verify the account ownership.</value>
        /// <example>&quot;0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef&quot;</example>
        [DataMember(Name = "signature", EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// The name of the account.
        /// </summary>
        /// <value>The name of the account.</value>
        /// <example>&quot;Escrow account&quot;</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeveloperAccountCreateRequest {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeveloperAccountCreateRequest);
        }

        /// <summary>
        /// Returns true if DeveloperAccountCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeveloperAccountCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeveloperAccountCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Signature != null)
                {
                    hashCode = (hashCode * 59) + this.Signature.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
