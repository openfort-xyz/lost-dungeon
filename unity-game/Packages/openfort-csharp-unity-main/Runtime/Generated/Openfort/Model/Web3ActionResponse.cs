/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// Web3ActionResponse
    /// </summary>
    [DataContract(Name = "Web3ActionResponse")]
    public partial class Web3ActionResponse : IEquatable<Web3ActionResponse>
    {

        /// <summary>
        /// Gets or Sets Object
        /// </summary>
        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public EntityTypeWEB3ACTION Object { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public Web3ActionStatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Web3ActionResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Web3ActionResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Web3ActionResponse" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="_object">_object (required).</param>
        /// <param name="createdAt">createdAt (required).</param>
        /// <param name="web3Connection">The web3_connection ID (starts with web3_). (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="chaindId">chaindId (required).</param>
        /// <param name="method">method (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="to">to.</param>
        /// <param name="data">data (required).</param>
        /// <param name="decodedData">decodedData (required).</param>
        /// <param name="hashedData">hashedData (required).</param>
        /// <param name="value">value.</param>
        /// <param name="gas">gas.</param>
        public Web3ActionResponse(string id = default(string), EntityTypeWEB3ACTION _object = default(EntityTypeWEB3ACTION), int createdAt = default(int), string web3Connection = default(string), Web3ActionStatusEnum status = default(Web3ActionStatusEnum), string chaindId = default(string), string method = default(string), string from = default(string), string to = default(string), string data = default(string), string decodedData = default(string), string hashedData = default(string), string value = default(string), string gas = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Web3ActionResponse and cannot be null");
            }
            this.Id = id;
            this.Object = _object;
            this.CreatedAt = createdAt;
            // to ensure "web3Connection" is required (not null)
            if (web3Connection == null)
            {
                throw new ArgumentNullException("web3Connection is a required property for Web3ActionResponse and cannot be null");
            }
            this.Web3Connection = web3Connection;
            this.Status = status;
            // to ensure "chaindId" is required (not null)
            if (chaindId == null)
            {
                throw new ArgumentNullException("chaindId is a required property for Web3ActionResponse and cannot be null");
            }
            this.ChaindId = chaindId;
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new ArgumentNullException("method is a required property for Web3ActionResponse and cannot be null");
            }
            this.Method = method;
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for Web3ActionResponse and cannot be null");
            }
            this.From = from;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for Web3ActionResponse and cannot be null");
            }
            this.Data = data;
            // to ensure "decodedData" is required (not null)
            if (decodedData == null)
            {
                throw new ArgumentNullException("decodedData is a required property for Web3ActionResponse and cannot be null");
            }
            this.DecodedData = decodedData;
            // to ensure "hashedData" is required (not null)
            if (hashedData == null)
            {
                throw new ArgumentNullException("hashedData is a required property for Web3ActionResponse and cannot be null");
            }
            this.HashedData = hashedData;
            this.To = to;
            this.Value = value;
            this.Gas = gas;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public int CreatedAt { get; set; }

        /// <summary>
        /// The web3_connection ID (starts with web3_).
        /// </summary>
        /// <value>The web3_connection ID (starts with web3_).</value>
        /// <example>&quot;web3_...&quot;</example>
        [DataMember(Name = "web3Connection", IsRequired = true, EmitDefaultValue = true)]
        public string Web3Connection { get; set; }

        /// <summary>
        /// Gets or Sets ChaindId
        /// </summary>
        [DataMember(Name = "chaindId", IsRequired = true, EmitDefaultValue = true)]
        public string ChaindId { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets DecodedData
        /// </summary>
        [DataMember(Name = "decodedData", IsRequired = true, EmitDefaultValue = true)]
        public string DecodedData { get; set; }

        /// <summary>
        /// Gets or Sets HashedData
        /// </summary>
        [DataMember(Name = "hashedData", IsRequired = true, EmitDefaultValue = true)]
        public string HashedData { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Gas
        /// </summary>
        [DataMember(Name = "gas", EmitDefaultValue = false)]
        public string Gas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Web3ActionResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Web3Connection: ").Append(Web3Connection).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ChaindId: ").Append(ChaindId).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DecodedData: ").Append(DecodedData).Append("\n");
            sb.Append("  HashedData: ").Append(HashedData).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Web3ActionResponse);
        }

        /// <summary>
        /// Returns true if Web3ActionResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of Web3ActionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Web3ActionResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Object == input.Object ||
                    this.Object.Equals(input.Object)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.Web3Connection == input.Web3Connection ||
                    (this.Web3Connection != null &&
                    this.Web3Connection.Equals(input.Web3Connection))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.ChaindId == input.ChaindId ||
                    (this.ChaindId != null &&
                    this.ChaindId.Equals(input.ChaindId))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.DecodedData == input.DecodedData ||
                    (this.DecodedData != null &&
                    this.DecodedData.Equals(input.DecodedData))
                ) && 
                (
                    this.HashedData == input.HashedData ||
                    (this.HashedData != null &&
                    this.HashedData.Equals(input.HashedData))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Gas == input.Gas ||
                    (this.Gas != null &&
                    this.Gas.Equals(input.Gas))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Object.GetHashCode();
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.Web3Connection != null)
                {
                    hashCode = (hashCode * 59) + this.Web3Connection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.ChaindId != null)
                {
                    hashCode = (hashCode * 59) + this.ChaindId.GetHashCode();
                }
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                if (this.From != null)
                {
                    hashCode = (hashCode * 59) + this.From.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.DecodedData != null)
                {
                    hashCode = (hashCode * 59) + this.DecodedData.GetHashCode();
                }
                if (this.HashedData != null)
                {
                    hashCode = (hashCode * 59) + this.HashedData.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.Gas != null)
                {
                    hashCode = (hashCode * 59) + this.Gas.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
