/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Openfort.Client.OpenAPIDateConverter;

namespace Openfort.Model
{
    /// <summary>
    /// return value from estimateTransactionIntentCost
    /// </summary>
    [DataContract(Name = "EstimateTransactionIntentGasResult")]
    public partial class EstimateTransactionIntentGasResult : IEquatable<EstimateTransactionIntentGasResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateTransactionIntentGasResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EstimateTransactionIntentGasResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateTransactionIntentGasResult" /> class.
        /// </summary>
        /// <param name="preVerificationGas">the preVerification gas used by this UserOperation. (required).</param>
        /// <param name="verificationGas">gas used for validation of this UserOperation, including account creation (required).</param>
        /// <param name="validUntil">the deadline after which this UserOperation is invalid (not a gas estimation parameter, but returned by validation.</param>
        /// <param name="validAfter">the deadline after which this UserOperation is valid (not a gas estimation parameter, but returned by validation.</param>
        /// <param name="callGasLimit">estimated cost of calling the account with the given callData (required).</param>
        /// <param name="verificationGasLimit">returned by some bundlers (e.g. Biconomy&#39;s).</param>
        /// <param name="estimatedTXGas">estimated TX gas cost (required).</param>
        /// <param name="estimatedTXGasFee">estimated TX gas cost in the chain native token (WEI) (required).</param>
        /// <param name="estimatedTXGasFeeUSD">estimated TX gas cost in USD (required).</param>
        /// <param name="estimatedTXGasFeeToken">when using a policy, the estimated TX gas cost in the ERC-20 token defined in the strategy (WEI).</param>
        /// <param name="gasPrice">gas price used for the estimation (required).</param>
        public EstimateTransactionIntentGasResult(string preVerificationGas = default(string), string verificationGas = default(string), string validUntil = default(string), string validAfter = default(string), string callGasLimit = default(string), string verificationGasLimit = default(string), string estimatedTXGas = default(string), string estimatedTXGasFee = default(string), string estimatedTXGasFeeUSD = default(string), string estimatedTXGasFeeToken = default(string), string gasPrice = default(string))
        {
            // to ensure "preVerificationGas" is required (not null)
            if (preVerificationGas == null)
            {
                throw new ArgumentNullException("preVerificationGas is a required property for EstimateTransactionIntentGasResult and cannot be null");
            }
            this.PreVerificationGas = preVerificationGas;
            // to ensure "verificationGas" is required (not null)
            if (verificationGas == null)
            {
                throw new ArgumentNullException("verificationGas is a required property for EstimateTransactionIntentGasResult and cannot be null");
            }
            this.VerificationGas = verificationGas;
            // to ensure "callGasLimit" is required (not null)
            if (callGasLimit == null)
            {
                throw new ArgumentNullException("callGasLimit is a required property for EstimateTransactionIntentGasResult and cannot be null");
            }
            this.CallGasLimit = callGasLimit;
            // to ensure "estimatedTXGas" is required (not null)
            if (estimatedTXGas == null)
            {
                throw new ArgumentNullException("estimatedTXGas is a required property for EstimateTransactionIntentGasResult and cannot be null");
            }
            this.EstimatedTXGas = estimatedTXGas;
            // to ensure "estimatedTXGasFee" is required (not null)
            if (estimatedTXGasFee == null)
            {
                throw new ArgumentNullException("estimatedTXGasFee is a required property for EstimateTransactionIntentGasResult and cannot be null");
            }
            this.EstimatedTXGasFee = estimatedTXGasFee;
            // to ensure "estimatedTXGasFeeUSD" is required (not null)
            if (estimatedTXGasFeeUSD == null)
            {
                throw new ArgumentNullException("estimatedTXGasFeeUSD is a required property for EstimateTransactionIntentGasResult and cannot be null");
            }
            this.EstimatedTXGasFeeUSD = estimatedTXGasFeeUSD;
            // to ensure "gasPrice" is required (not null)
            if (gasPrice == null)
            {
                throw new ArgumentNullException("gasPrice is a required property for EstimateTransactionIntentGasResult and cannot be null");
            }
            this.GasPrice = gasPrice;
            this.ValidUntil = validUntil;
            this.ValidAfter = validAfter;
            this.VerificationGasLimit = verificationGasLimit;
            this.EstimatedTXGasFeeToken = estimatedTXGasFeeToken;
        }

        /// <summary>
        /// the preVerification gas used by this UserOperation.
        /// </summary>
        /// <value>the preVerification gas used by this UserOperation.</value>
        [DataMember(Name = "preVerificationGas", IsRequired = true, EmitDefaultValue = true)]
        public string PreVerificationGas { get; set; }

        /// <summary>
        /// gas used for validation of this UserOperation, including account creation
        /// </summary>
        /// <value>gas used for validation of this UserOperation, including account creation</value>
        [DataMember(Name = "verificationGas", IsRequired = true, EmitDefaultValue = true)]
        public string VerificationGas { get; set; }

        /// <summary>
        /// the deadline after which this UserOperation is invalid (not a gas estimation parameter, but returned by validation
        /// </summary>
        /// <value>the deadline after which this UserOperation is invalid (not a gas estimation parameter, but returned by validation</value>
        [DataMember(Name = "validUntil", EmitDefaultValue = false)]
        public string ValidUntil { get; set; }

        /// <summary>
        /// the deadline after which this UserOperation is valid (not a gas estimation parameter, but returned by validation
        /// </summary>
        /// <value>the deadline after which this UserOperation is valid (not a gas estimation parameter, but returned by validation</value>
        [DataMember(Name = "validAfter", EmitDefaultValue = false)]
        public string ValidAfter { get; set; }

        /// <summary>
        /// estimated cost of calling the account with the given callData
        /// </summary>
        /// <value>estimated cost of calling the account with the given callData</value>
        [DataMember(Name = "callGasLimit", IsRequired = true, EmitDefaultValue = true)]
        public string CallGasLimit { get; set; }

        /// <summary>
        /// returned by some bundlers (e.g. Biconomy&#39;s)
        /// </summary>
        /// <value>returned by some bundlers (e.g. Biconomy&#39;s)</value>
        [DataMember(Name = "verificationGasLimit", EmitDefaultValue = false)]
        public string VerificationGasLimit { get; set; }

        /// <summary>
        /// estimated TX gas cost
        /// </summary>
        /// <value>estimated TX gas cost</value>
        [DataMember(Name = "estimatedTXGas", IsRequired = true, EmitDefaultValue = true)]
        public string EstimatedTXGas { get; set; }

        /// <summary>
        /// estimated TX gas cost in the chain native token (WEI)
        /// </summary>
        /// <value>estimated TX gas cost in the chain native token (WEI)</value>
        [DataMember(Name = "estimatedTXGasFee", IsRequired = true, EmitDefaultValue = true)]
        public string EstimatedTXGasFee { get; set; }

        /// <summary>
        /// estimated TX gas cost in USD
        /// </summary>
        /// <value>estimated TX gas cost in USD</value>
        [DataMember(Name = "estimatedTXGasFeeUSD", IsRequired = true, EmitDefaultValue = true)]
        public string EstimatedTXGasFeeUSD { get; set; }

        /// <summary>
        /// when using a policy, the estimated TX gas cost in the ERC-20 token defined in the strategy (WEI)
        /// </summary>
        /// <value>when using a policy, the estimated TX gas cost in the ERC-20 token defined in the strategy (WEI)</value>
        [DataMember(Name = "estimatedTXGasFeeToken", EmitDefaultValue = false)]
        public string EstimatedTXGasFeeToken { get; set; }

        /// <summary>
        /// gas price used for the estimation
        /// </summary>
        /// <value>gas price used for the estimation</value>
        [DataMember(Name = "gasPrice", IsRequired = true, EmitDefaultValue = true)]
        public string GasPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimateTransactionIntentGasResult {\n");
            sb.Append("  PreVerificationGas: ").Append(PreVerificationGas).Append("\n");
            sb.Append("  VerificationGas: ").Append(VerificationGas).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("  ValidAfter: ").Append(ValidAfter).Append("\n");
            sb.Append("  CallGasLimit: ").Append(CallGasLimit).Append("\n");
            sb.Append("  VerificationGasLimit: ").Append(VerificationGasLimit).Append("\n");
            sb.Append("  EstimatedTXGas: ").Append(EstimatedTXGas).Append("\n");
            sb.Append("  EstimatedTXGasFee: ").Append(EstimatedTXGasFee).Append("\n");
            sb.Append("  EstimatedTXGasFeeUSD: ").Append(EstimatedTXGasFeeUSD).Append("\n");
            sb.Append("  EstimatedTXGasFeeToken: ").Append(EstimatedTXGasFeeToken).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EstimateTransactionIntentGasResult);
        }

        /// <summary>
        /// Returns true if EstimateTransactionIntentGasResult instances are equal
        /// </summary>
        /// <param name="input">Instance of EstimateTransactionIntentGasResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstimateTransactionIntentGasResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PreVerificationGas == input.PreVerificationGas ||
                    (this.PreVerificationGas != null &&
                    this.PreVerificationGas.Equals(input.PreVerificationGas))
                ) && 
                (
                    this.VerificationGas == input.VerificationGas ||
                    (this.VerificationGas != null &&
                    this.VerificationGas.Equals(input.VerificationGas))
                ) && 
                (
                    this.ValidUntil == input.ValidUntil ||
                    (this.ValidUntil != null &&
                    this.ValidUntil.Equals(input.ValidUntil))
                ) && 
                (
                    this.ValidAfter == input.ValidAfter ||
                    (this.ValidAfter != null &&
                    this.ValidAfter.Equals(input.ValidAfter))
                ) && 
                (
                    this.CallGasLimit == input.CallGasLimit ||
                    (this.CallGasLimit != null &&
                    this.CallGasLimit.Equals(input.CallGasLimit))
                ) && 
                (
                    this.VerificationGasLimit == input.VerificationGasLimit ||
                    (this.VerificationGasLimit != null &&
                    this.VerificationGasLimit.Equals(input.VerificationGasLimit))
                ) && 
                (
                    this.EstimatedTXGas == input.EstimatedTXGas ||
                    (this.EstimatedTXGas != null &&
                    this.EstimatedTXGas.Equals(input.EstimatedTXGas))
                ) && 
                (
                    this.EstimatedTXGasFee == input.EstimatedTXGasFee ||
                    (this.EstimatedTXGasFee != null &&
                    this.EstimatedTXGasFee.Equals(input.EstimatedTXGasFee))
                ) && 
                (
                    this.EstimatedTXGasFeeUSD == input.EstimatedTXGasFeeUSD ||
                    (this.EstimatedTXGasFeeUSD != null &&
                    this.EstimatedTXGasFeeUSD.Equals(input.EstimatedTXGasFeeUSD))
                ) && 
                (
                    this.EstimatedTXGasFeeToken == input.EstimatedTXGasFeeToken ||
                    (this.EstimatedTXGasFeeToken != null &&
                    this.EstimatedTXGasFeeToken.Equals(input.EstimatedTXGasFeeToken))
                ) && 
                (
                    this.GasPrice == input.GasPrice ||
                    (this.GasPrice != null &&
                    this.GasPrice.Equals(input.GasPrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PreVerificationGas != null)
                {
                    hashCode = (hashCode * 59) + this.PreVerificationGas.GetHashCode();
                }
                if (this.VerificationGas != null)
                {
                    hashCode = (hashCode * 59) + this.VerificationGas.GetHashCode();
                }
                if (this.ValidUntil != null)
                {
                    hashCode = (hashCode * 59) + this.ValidUntil.GetHashCode();
                }
                if (this.ValidAfter != null)
                {
                    hashCode = (hashCode * 59) + this.ValidAfter.GetHashCode();
                }
                if (this.CallGasLimit != null)
                {
                    hashCode = (hashCode * 59) + this.CallGasLimit.GetHashCode();
                }
                if (this.VerificationGasLimit != null)
                {
                    hashCode = (hashCode * 59) + this.VerificationGasLimit.GetHashCode();
                }
                if (this.EstimatedTXGas != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedTXGas.GetHashCode();
                }
                if (this.EstimatedTXGasFee != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedTXGasFee.GetHashCode();
                }
                if (this.EstimatedTXGasFeeUSD != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedTXGasFeeUSD.GetHashCode();
                }
                if (this.EstimatedTXGasFeeToken != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedTXGasFeeToken.GetHashCode();
                }
                if (this.GasPrice != null)
                {
                    hashCode = (hashCode * 59) + this.GasPrice.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
